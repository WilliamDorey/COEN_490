
Capstone - Atmega328PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021c  00800100  0000102c  000010a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000102c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002cff  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b42  00000000  00000000  00004183  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014df  00000000  00000000  00004cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000039c  00000000  00000000  000061a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000782  00000000  00000000  00006540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c22  00000000  00000000  00006cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c0  00000000  00000000  000088e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
       c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      74:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      7c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      80:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      84:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      88:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      8c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      90:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      94:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      98:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      9c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      a0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      a4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      a8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      ac:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      b0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
      b4:	86 05       	cpc	r24, r6
      b6:	b0 07       	cpc	r27, r16
      b8:	b0 07       	cpc	r27, r16
      ba:	2e 05       	cpc	r18, r14
      bc:	b0 07       	cpc	r27, r16
      be:	b0 07       	cpc	r27, r16
      c0:	b0 07       	cpc	r27, r16
      c2:	b0 07       	cpc	r27, r16
      c4:	b0 07       	cpc	r27, r16
      c6:	b0 07       	cpc	r27, r16
      c8:	b0 07       	cpc	r27, r16
      ca:	f5 04       	cpc	r15, r5
      cc:	b0 07       	cpc	r27, r16
      ce:	b0 07       	cpc	r27, r16
      d0:	b0 07       	cpc	r27, r16
      d2:	b0 07       	cpc	r27, r16
      d4:	b0 07       	cpc	r27, r16
      d6:	4c 05       	cpc	r20, r12
      d8:	b0 07       	cpc	r27, r16
      da:	8e 05       	cpc	r24, r14
      dc:	b0 07       	cpc	r27, r16
      de:	19 06       	cpc	r1, r25
      e0:	b0 07       	cpc	r27, r16
      e2:	81 05       	cpc	r24, r1

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d8 e0       	ldi	r29, 0x08	; 8
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
      f0:	13 e0       	ldi	r17, 0x03	; 3
      f2:	a0 e0       	ldi	r26, 0x00	; 0
      f4:	b1 e0       	ldi	r27, 0x01	; 1
      f6:	ec e2       	ldi	r30, 0x2C	; 44
      f8:	f0 e1       	ldi	r31, 0x10	; 16
      fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
      fc:	05 90       	lpm	r0, Z+
      fe:	0d 92       	st	X+, r0
     100:	ac 31       	cpi	r26, 0x1C	; 28
     102:	b1 07       	cpc	r27, r17
     104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
     106:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <main>
     10a:	0c 94 14 08 	jmp	0x1028	; 0x1028 <_exit>

0000010e <__bad_interrupt>:
     10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <UART_init>:
{
	
}

void Set_LMP_REFCN(uint8_t ID, uint8_t val)
{
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     118:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     11c:	87 e6       	ldi	r24, 0x67	; 103
     11e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     122:	86 e0       	ldi	r24, 0x06	; 6
     124:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     128:	88 e1       	ldi	r24, 0x18	; 24
     12a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     12e:	08 95       	ret

00000130 <UART_RxChar>:
     130:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     134:	88 23       	and	r24, r24
     136:	e4 f7       	brge	.-8      	; 0x130 <UART_RxChar>
     138:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     13c:	08 95       	ret

0000013e <UART_TxChar>:
     13e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     142:	95 ff       	sbrs	r25, 5
     144:	fc cf       	rjmp	.-8      	; 0x13e <UART_TxChar>
     146:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     14a:	08 95       	ret

0000014c <UART_SendString>:
     14c:	0f 93       	push	r16
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	8c 01       	movw	r16, r24
     154:	c0 e0       	ldi	r28, 0x00	; 0
     156:	03 c0       	rjmp	.+6      	; 0x15e <UART_SendString+0x12>
     158:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
     15c:	cf 5f       	subi	r28, 0xFF	; 255
     15e:	f8 01       	movw	r30, r16
     160:	ec 0f       	add	r30, r28
     162:	f1 1d       	adc	r31, r1
     164:	80 81       	ld	r24, Z
     166:	81 11       	cpse	r24, r1
     168:	f7 cf       	rjmp	.-18     	; 0x158 <UART_SendString+0xc>
     16a:	cf 91       	pop	r28
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	08 95       	ret

00000172 <SPI_Init>:
     172:	84 b1       	in	r24, 0x04	; 4
     174:	8c 62       	ori	r24, 0x2C	; 44
     176:	84 b9       	out	0x04, r24	; 4
     178:	83 e5       	ldi	r24, 0x53	; 83
     17a:	8c bd       	out	0x2c, r24	; 44
     17c:	1d bc       	out	0x2d, r1	; 45
     17e:	08 95       	ret

00000180 <SPI_Write>:
     180:	8e bd       	out	0x2e, r24	; 46
     182:	0d b4       	in	r0, 0x2d	; 45
     184:	07 fe       	sbrs	r0, 7
     186:	fd cf       	rjmp	.-6      	; 0x182 <SPI_Write+0x2>
     188:	08 95       	ret

0000018a <SPI_Transceiver>:
     18a:	8e bd       	out	0x2e, r24	; 46
     18c:	0d b4       	in	r0, 0x2d	; 45
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <SPI_Transceiver+0x2>
     192:	8e b5       	in	r24, 0x2e	; 46
     194:	08 95       	ret

00000196 <TWI_init_master>:
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     19c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1a0:	08 95       	ret

000001a2 <TWI_start>:
     1a2:	84 ea       	ldi	r24, 0xA4	; 164
     1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1a8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ac:	88 23       	and	r24, r24
     1ae:	e4 f7       	brge	.-8      	; 0x1a8 <TWI_start+0x6>
     1b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1b4:	88 7f       	andi	r24, 0xF8	; 248
     1b6:	88 30       	cpi	r24, 0x08	; 8
     1b8:	d9 f7       	brne	.-10     	; 0x1b0 <TWI_start+0xe>
     1ba:	08 95       	ret

000001bc <TWI_read_address>:
     1bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1c0:	84 e8       	ldi	r24, 0x84	; 132
     1c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1c6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ca:	88 23       	and	r24, r24
     1cc:	e4 f7       	brge	.-8      	; 0x1c6 <TWI_read_address+0xa>
     1ce:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1d2:	88 7f       	andi	r24, 0xF8	; 248
     1d4:	80 34       	cpi	r24, 0x40	; 64
     1d6:	d9 f7       	brne	.-10     	; 0x1ce <TWI_read_address+0x12>
     1d8:	08 95       	ret

000001da <TWI_read_data>:
     1da:	fc 01       	movw	r30, r24
     1dc:	84 e8       	ldi	r24, 0x84	; 132
     1de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1e2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1e6:	99 23       	and	r25, r25
     1e8:	e4 f7       	brge	.-8      	; 0x1e2 <TWI_read_data+0x8>
     1ea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1ee:	98 7f       	andi	r25, 0xF8	; 248
     1f0:	98 35       	cpi	r25, 0x58	; 88
     1f2:	d9 f7       	brne	.-10     	; 0x1ea <TWI_read_data+0x10>
     1f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1f8:	80 83       	st	Z, r24
     1fa:	08 95       	ret

000001fc <TWI_write_address>:
     1fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     200:	84 e8       	ldi	r24, 0x84	; 132
     202:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     206:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     20a:	88 23       	and	r24, r24
     20c:	e4 f7       	brge	.-8      	; 0x206 <TWI_write_address+0xa>
     20e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     212:	88 7f       	andi	r24, 0xF8	; 248
     214:	88 31       	cpi	r24, 0x18	; 24
     216:	d9 f7       	brne	.-10     	; 0x20e <TWI_write_address+0x12>
     218:	08 95       	ret

0000021a <TWI_write_data>:
     21a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     21e:	84 e8       	ldi	r24, 0x84	; 132
     220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     224:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     228:	88 23       	and	r24, r24
     22a:	e4 f7       	brge	.-8      	; 0x224 <TWI_write_data+0xa>
     22c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     230:	88 7f       	andi	r24, 0xF8	; 248
     232:	88 32       	cpi	r24, 0x28	; 40
     234:	d9 f7       	brne	.-10     	; 0x22c <TWI_write_data+0x12>
     236:	08 95       	ret

00000238 <TWI_stop>:
     238:	84 e9       	ldi	r24, 0x94	; 148
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     23e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     242:	84 ff       	sbrs	r24, 4
     244:	fc cf       	rjmp	.-8      	; 0x23e <TWI_stop+0x6>
     246:	08 95       	ret

00000248 <lookup_cs_values>:
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	18 c0       	rjmp	.+48     	; 0x27c <lookup_cs_values+0x34>
     24c:	29 2f       	mov	r18, r25
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	f9 01       	movw	r30, r18
     252:	ee 0f       	add	r30, r30
     254:	ff 1f       	adc	r31, r31
     256:	e9 50       	subi	r30, 0x09	; 9
     258:	fd 4f       	sbci	r31, 0xFD	; 253
     25a:	40 81       	ld	r20, Z
     25c:	84 17       	cp	r24, r20
     25e:	68 f0       	brcs	.+26     	; 0x27a <lookup_cs_values+0x32>
     260:	f9 01       	movw	r30, r18
     262:	ee 0f       	add	r30, r30
     264:	ff 1f       	adc	r31, r31
     266:	e9 50       	subi	r30, 0x09	; 9
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	41 81       	ldd	r20, Z+1	; 0x01
     26c:	48 17       	cp	r20, r24
     26e:	28 f0       	brcs	.+10     	; 0x27a <lookup_cs_values+0x32>
     270:	f9 01       	movw	r30, r18
     272:	eb 51       	subi	r30, 0x1B	; 27
     274:	fd 4f       	sbci	r31, 0xFD	; 253
     276:	80 81       	ld	r24, Z
     278:	08 95       	ret
     27a:	9f 5f       	subi	r25, 0xFF	; 255
     27c:	92 31       	cpi	r25, 0x12	; 18
     27e:	30 f3       	brcs	.-52     	; 0x24c <lookup_cs_values+0x4>
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	08 95       	ret

00000284 <lookup_hex_values>:
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	12 c0       	rjmp	.+36     	; 0x2ac <lookup_hex_values+0x28>
     288:	29 2f       	mov	r18, r25
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	f9 01       	movw	r30, r18
     28e:	ee 0f       	add	r30, r30
     290:	ff 1f       	adc	r31, r31
     292:	e1 5b       	subi	r30, 0xB1	; 177
     294:	fd 4f       	sbci	r31, 0xFD	; 253
     296:	40 81       	ld	r20, Z
     298:	48 13       	cpse	r20, r24
     29a:	07 c0       	rjmp	.+14     	; 0x2aa <lookup_hex_values+0x26>
     29c:	22 0f       	add	r18, r18
     29e:	33 1f       	adc	r19, r19
     2a0:	f9 01       	movw	r30, r18
     2a2:	e1 5b       	subi	r30, 0xB1	; 177
     2a4:	fd 4f       	sbci	r31, 0xFD	; 253
     2a6:	81 81       	ldd	r24, Z+1	; 0x01
     2a8:	08 95       	ret
     2aa:	9f 5f       	subi	r25, 0xFF	; 255
     2ac:	9b 34       	cpi	r25, 0x4B	; 75
     2ae:	60 f3       	brcs	.-40     	; 0x288 <lookup_hex_values+0x4>
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	08 95       	ret

000002b4 <Init_IOX>:
     2b4:	cf 93       	push	r28
     2b6:	c0 e0       	ldi	r28, 0x00	; 0
     2b8:	15 c0       	rjmp	.+42     	; 0x2e4 <Init_IOX+0x30>
     2ba:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     2be:	82 e4       	ldi	r24, 0x42	; 66
     2c0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     2c4:	88 e1       	ldi	r24, 0x18	; 24
     2c6:	8c 0f       	add	r24, r28
     2c8:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     2d2:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     2d6:	8f ec       	ldi	r24, 0xCF	; 207
     2d8:	97 e0       	ldi	r25, 0x07	; 7
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <Init_IOX+0x26>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <Init_IOX+0x2c>
     2e0:	00 00       	nop
     2e2:	cf 5f       	subi	r28, 0xFF	; 255
     2e4:	c5 30       	cpi	r28, 0x05	; 5
     2e6:	48 f3       	brcs	.-46     	; 0x2ba <Init_IOX+0x6>
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	15 c0       	rjmp	.+42     	; 0x316 <Init_IOX+0x62>
     2ec:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     2f0:	82 e4       	ldi	r24, 0x42	; 66
     2f2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     2f6:	88 e0       	ldi	r24, 0x08	; 8
     2f8:	8c 0f       	add	r24, r28
     2fa:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     2fe:	8f ef       	ldi	r24, 0xFF	; 255
     300:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     304:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     308:	8f ec       	ldi	r24, 0xCF	; 207
     30a:	97 e0       	ldi	r25, 0x07	; 7
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <Init_IOX+0x58>
     310:	00 c0       	rjmp	.+0      	; 0x312 <Init_IOX+0x5e>
     312:	00 00       	nop
     314:	cf 5f       	subi	r28, 0xFF	; 255
     316:	c5 30       	cpi	r28, 0x05	; 5
     318:	48 f3       	brcs	.-46     	; 0x2ec <Init_IOX+0x38>
     31a:	c0 e0       	ldi	r28, 0x00	; 0
     31c:	15 c0       	rjmp	.+42     	; 0x348 <Init_IOX+0x94>
     31e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     322:	80 e4       	ldi	r24, 0x40	; 64
     324:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     328:	88 e1       	ldi	r24, 0x18	; 24
     32a:	8c 0f       	add	r24, r28
     32c:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     336:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     33a:	8f ec       	ldi	r24, 0xCF	; 207
     33c:	97 e0       	ldi	r25, 0x07	; 7
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <Init_IOX+0x8a>
     342:	00 c0       	rjmp	.+0      	; 0x344 <Init_IOX+0x90>
     344:	00 00       	nop
     346:	cf 5f       	subi	r28, 0xFF	; 255
     348:	c5 30       	cpi	r28, 0x05	; 5
     34a:	48 f3       	brcs	.-46     	; 0x31e <Init_IOX+0x6a>
     34c:	c0 e0       	ldi	r28, 0x00	; 0
     34e:	15 c0       	rjmp	.+42     	; 0x37a <Init_IOX+0xc6>
     350:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     354:	80 e4       	ldi	r24, 0x40	; 64
     356:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     35a:	88 e0       	ldi	r24, 0x08	; 8
     35c:	8c 0f       	add	r24, r28
     35e:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     362:	8f ef       	ldi	r24, 0xFF	; 255
     364:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     368:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     36c:	8f ec       	ldi	r24, 0xCF	; 207
     36e:	97 e0       	ldi	r25, 0x07	; 7
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <Init_IOX+0xbc>
     374:	00 c0       	rjmp	.+0      	; 0x376 <Init_IOX+0xc2>
     376:	00 00       	nop
     378:	cf 5f       	subi	r28, 0xFF	; 255
     37a:	c5 30       	cpi	r28, 0x05	; 5
     37c:	48 f3       	brcs	.-46     	; 0x350 <Init_IOX+0x9c>
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <CS_low>:
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	c8 2f       	mov	r28, r24
     38a:	0e 94 24 01 	call	0x248	; 0x248 <lookup_cs_values>
     38e:	18 2f       	mov	r17, r24
     390:	8c 2f       	mov	r24, r28
     392:	0e 94 42 01 	call	0x284	; 0x284 <lookup_hex_values>
     396:	d8 2f       	mov	r29, r24
     398:	24 ee       	ldi	r18, 0xE4	; 228
     39a:	2c 0f       	add	r18, r28
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	c9 31       	cpi	r28, 0x19	; 25
     3a0:	08 f0       	brcs	.+2      	; 0x3a4 <CS_low+0x22>
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	2a 30       	cpi	r18, 0x0A	; 10
     3a8:	08 f0       	brcs	.+2      	; 0x3ac <CS_low+0x2a>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	89 2b       	or	r24, r25
     3ae:	79 f0       	breq	.+30     	; 0x3ce <CS_low+0x4c>
     3b0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     3b4:	82 e4       	ldi	r24, 0x42	; 66
     3b6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     3ba:	88 e0       	ldi	r24, 0x08	; 8
     3bc:	81 0f       	add	r24, r17
     3be:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     3c2:	8d 2f       	mov	r24, r29
     3c4:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     3c8:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     3cc:	0e c0       	rjmp	.+28     	; 0x3ea <CS_low+0x68>
     3ce:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     3d2:	80 e4       	ldi	r24, 0x40	; 64
     3d4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     3d8:	88 e0       	ldi	r24, 0x08	; 8
     3da:	81 0f       	add	r24, r17
     3dc:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     3e0:	8d 2f       	mov	r24, r29
     3e2:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     3e6:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	1f 91       	pop	r17
     3f0:	08 95       	ret

000003f2 <CS_high>:
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	c8 2f       	mov	r28, r24
     3f8:	0e 94 24 01 	call	0x248	; 0x248 <lookup_cs_values>
     3fc:	d8 2f       	mov	r29, r24
     3fe:	24 ee       	ldi	r18, 0xE4	; 228
     400:	2c 0f       	add	r18, r28
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	c9 31       	cpi	r28, 0x19	; 25
     406:	08 f0       	brcs	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	2a 30       	cpi	r18, 0x0A	; 10
     40e:	08 f0       	brcs	.+2      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	89 2b       	or	r24, r25
     414:	79 f0       	breq	.+30     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     416:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     41a:	82 e4       	ldi	r24, 0x42	; 66
     41c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     420:	88 e0       	ldi	r24, 0x08	; 8
     422:	8d 0f       	add	r24, r29
     424:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     42e:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     432:	0e c0       	rjmp	.+28     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
     434:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     438:	80 e4       	ldi	r24, 0x40	; 64
     43a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     43e:	88 e0       	ldi	r24, 0x08	; 8
     440:	8d 0f       	add	r24, r29
     442:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     446:	8f ef       	ldi	r24, 0xFF	; 255
     448:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     44c:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <LED_all_off>:
     456:	cf 93       	push	r28
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	06 c0       	rjmp	.+12     	; 0x46a <LED_all_off+0x14>
     45e:	fc 01       	movw	r30, r24
     460:	e2 0f       	add	r30, r18
     462:	f3 1f       	adc	r31, r19
     464:	10 82       	st	Z, r1
     466:	2f 5f       	subi	r18, 0xFF	; 255
     468:	3f 4f       	sbci	r19, 0xFF	; 255
     46a:	22 33       	cpi	r18, 0x32	; 50
     46c:	31 05       	cpc	r19, r1
     46e:	bc f3       	brlt	.-18     	; 0x45e <LED_all_off+0x8>
     470:	c0 e0       	ldi	r28, 0x00	; 0
     472:	13 c0       	rjmp	.+38     	; 0x49a <LED_all_off+0x44>
     474:	8c 2f       	mov	r24, r28
     476:	0e 94 c1 01 	call	0x382	; 0x382 <CS_low>
     47a:	80 e4       	ldi	r24, 0x40	; 64
     47c:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
     480:	88 e8       	ldi	r24, 0x88	; 136
     482:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
     486:	8c 2f       	mov	r24, r28
     488:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <CS_high>
     48c:	8f ec       	ldi	r24, 0xCF	; 207
     48e:	97 e0       	ldi	r25, 0x07	; 7
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <LED_all_off+0x3a>
     494:	00 c0       	rjmp	.+0      	; 0x496 <LED_all_off+0x40>
     496:	00 00       	nop
     498:	cf 5f       	subi	r28, 0xFF	; 255
     49a:	cb 34       	cpi	r28, 0x4B	; 75
     49c:	58 f3       	brcs	.-42     	; 0x474 <LED_all_off+0x1e>
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret

000004a2 <LED_all_on>:
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	ac 01       	movw	r20, r24
     4a8:	67 34       	cpi	r22, 0x47	; 71
     4aa:	31 f0       	breq	.+12     	; 0x4b8 <LED_all_on+0x16>
     4ac:	62 35       	cpi	r22, 0x52	; 82
     4ae:	41 f0       	breq	.+16     	; 0x4c0 <LED_all_on+0x1e>
     4b0:	62 34       	cpi	r22, 0x42	; 66
     4b2:	21 f0       	breq	.+8      	; 0x4bc <LED_all_on+0x1a>
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <LED_all_on+0x20>
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	03 c0       	rjmp	.+6      	; 0x4c2 <LED_all_on+0x20>
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <LED_all_on+0x20>
     4c0:	84 e0       	ldi	r24, 0x04	; 4
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <LED_all_on+0x36>
     4c8:	fa 01       	movw	r30, r20
     4ca:	e2 0f       	add	r30, r18
     4cc:	f3 1f       	adc	r31, r19
     4ce:	90 81       	ld	r25, Z
     4d0:	98 2b       	or	r25, r24
     4d2:	90 83       	st	Z, r25
     4d4:	2f 5f       	subi	r18, 0xFF	; 255
     4d6:	3f 4f       	sbci	r19, 0xFF	; 255
     4d8:	22 33       	cpi	r18, 0x32	; 50
     4da:	31 05       	cpc	r19, r1
     4dc:	ac f3       	brlt	.-22     	; 0x4c8 <LED_all_on+0x26>
     4de:	67 34       	cpi	r22, 0x47	; 71
     4e0:	49 f0       	breq	.+18     	; 0x4f4 <LED_all_on+0x52>
     4e2:	62 35       	cpi	r22, 0x52	; 82
     4e4:	19 f0       	breq	.+6      	; 0x4ec <LED_all_on+0x4a>
     4e6:	62 34       	cpi	r22, 0x42	; 66
     4e8:	19 f5       	brne	.+70     	; 0x530 <LED_all_on+0x8e>
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <LED_all_on+0x4e>
     4ec:	d0 e0       	ldi	r29, 0x00	; 0
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <LED_all_on+0x54>
     4f0:	d2 e3       	ldi	r29, 0x32	; 50
     4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <LED_all_on+0x54>
     4f4:	d9 e1       	ldi	r29, 0x19	; 25
     4f6:	cd 2f       	mov	r28, r29
     4f8:	13 c0       	rjmp	.+38     	; 0x520 <LED_all_on+0x7e>
     4fa:	8c 2f       	mov	r24, r28
     4fc:	0e 94 c1 01 	call	0x382	; 0x382 <CS_low>
     500:	80 e4       	ldi	r24, 0x40	; 64
     502:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
     506:	8f ef       	ldi	r24, 0xFF	; 255
     508:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
     50c:	8c 2f       	mov	r24, r28
     50e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <CS_high>
     512:	8f ec       	ldi	r24, 0xCF	; 207
     514:	97 e0       	ldi	r25, 0x07	; 7
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <LED_all_on+0x74>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <LED_all_on+0x7a>
     51c:	00 00       	nop
     51e:	cf 5f       	subi	r28, 0xFF	; 255
     520:	2c 2f       	mov	r18, r28
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	8d 2f       	mov	r24, r29
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	49 96       	adiw	r24, 0x19	; 25
     52a:	28 17       	cp	r18, r24
     52c:	39 07       	cpc	r19, r25
     52e:	2c f3       	brlt	.-54     	; 0x4fa <LED_all_on+0x58>
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <ToggleLED>:
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	c6 2f       	mov	r28, r22
     53c:	c6 95       	lsr	r28
     53e:	62 33       	cpi	r22, 0x32	; 50
     540:	08 f0       	brcs	.+2      	; 0x544 <ToggleLED+0xe>
     542:	a2 c0       	rjmp	.+324    	; 0x688 <ToggleLED+0x152>
     544:	47 34       	cpi	r20, 0x47	; 71
     546:	a9 f1       	breq	.+106    	; 0x5b2 <ToggleLED+0x7c>
     548:	42 35       	cpi	r20, 0x52	; 82
     54a:	21 f0       	breq	.+8      	; 0x554 <ToggleLED+0x1e>
     54c:	42 34       	cpi	r20, 0x42	; 66
     54e:	09 f0       	breq	.+2      	; 0x552 <ToggleLED+0x1c>
     550:	9b c0       	rjmp	.+310    	; 0x688 <ToggleLED+0x152>
     552:	5f c0       	rjmp	.+190    	; 0x612 <ToggleLED+0xdc>
     554:	46 2f       	mov	r20, r22
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	fc 01       	movw	r30, r24
     55a:	e4 0f       	add	r30, r20
     55c:	f5 1f       	adc	r31, r21
     55e:	30 81       	ld	r19, Z
     560:	23 2f       	mov	r18, r19
     562:	20 95       	com	r18
     564:	24 70       	andi	r18, 0x04	; 4
     566:	33 70       	andi	r19, 0x03	; 3
     568:	23 2b       	or	r18, r19
     56a:	20 83       	st	Z, r18
     56c:	60 ff       	sbrs	r22, 0
     56e:	11 c0       	rjmp	.+34     	; 0x592 <ToggleLED+0x5c>
     570:	24 70       	andi	r18, 0x04	; 4
     572:	11 f0       	breq	.+4      	; 0x578 <ToggleLED+0x42>
     574:	d0 ef       	ldi	r29, 0xF0	; 240
     576:	01 c0       	rjmp	.+2      	; 0x57a <ToggleLED+0x44>
     578:	d0 e0       	ldi	r29, 0x00	; 0
     57a:	84 0f       	add	r24, r20
     57c:	95 1f       	adc	r25, r21
     57e:	fc 01       	movw	r30, r24
     580:	31 97       	sbiw	r30, 0x01	; 1
     582:	80 81       	ld	r24, Z
     584:	82 ff       	sbrs	r24, 2
     586:	02 c0       	rjmp	.+4      	; 0x58c <ToggleLED+0x56>
     588:	8f e0       	ldi	r24, 0x0F	; 15
     58a:	01 c0       	rjmp	.+2      	; 0x58e <ToggleLED+0x58>
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	d8 2b       	or	r29, r24
     590:	6f c0       	rjmp	.+222    	; 0x670 <ToggleLED+0x13a>
     592:	fc 01       	movw	r30, r24
     594:	e4 0f       	add	r30, r20
     596:	f5 1f       	adc	r31, r21
     598:	81 81       	ldd	r24, Z+1	; 0x01
     59a:	82 ff       	sbrs	r24, 2
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <ToggleLED+0x6c>
     59e:	d0 ef       	ldi	r29, 0xF0	; 240
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <ToggleLED+0x6e>
     5a2:	d0 e0       	ldi	r29, 0x00	; 0
     5a4:	24 70       	andi	r18, 0x04	; 4
     5a6:	11 f0       	breq	.+4      	; 0x5ac <ToggleLED+0x76>
     5a8:	8f e0       	ldi	r24, 0x0F	; 15
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <ToggleLED+0x78>
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	d8 2b       	or	r29, r24
     5b0:	5f c0       	rjmp	.+190    	; 0x670 <ToggleLED+0x13a>
     5b2:	c7 5e       	subi	r28, 0xE7	; 231
     5b4:	46 2f       	mov	r20, r22
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	fc 01       	movw	r30, r24
     5ba:	e4 0f       	add	r30, r20
     5bc:	f5 1f       	adc	r31, r21
     5be:	30 81       	ld	r19, Z
     5c0:	23 2f       	mov	r18, r19
     5c2:	20 95       	com	r18
     5c4:	22 70       	andi	r18, 0x02	; 2
     5c6:	35 70       	andi	r19, 0x05	; 5
     5c8:	23 2b       	or	r18, r19
     5ca:	20 83       	st	Z, r18
     5cc:	60 ff       	sbrs	r22, 0
     5ce:	11 c0       	rjmp	.+34     	; 0x5f2 <ToggleLED+0xbc>
     5d0:	21 ff       	sbrs	r18, 1
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <ToggleLED+0xa2>
     5d4:	d0 ef       	ldi	r29, 0xF0	; 240
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <ToggleLED+0xa4>
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
     5da:	84 0f       	add	r24, r20
     5dc:	95 1f       	adc	r25, r21
     5de:	fc 01       	movw	r30, r24
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	80 81       	ld	r24, Z
     5e4:	81 ff       	sbrs	r24, 1
     5e6:	02 c0       	rjmp	.+4      	; 0x5ec <ToggleLED+0xb6>
     5e8:	8f e0       	ldi	r24, 0x0F	; 15
     5ea:	01 c0       	rjmp	.+2      	; 0x5ee <ToggleLED+0xb8>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	d8 2b       	or	r29, r24
     5f0:	3f c0       	rjmp	.+126    	; 0x670 <ToggleLED+0x13a>
     5f2:	fc 01       	movw	r30, r24
     5f4:	e4 0f       	add	r30, r20
     5f6:	f5 1f       	adc	r31, r21
     5f8:	81 81       	ldd	r24, Z+1	; 0x01
     5fa:	81 ff       	sbrs	r24, 1
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <ToggleLED+0xcc>
     5fe:	d0 ef       	ldi	r29, 0xF0	; 240
     600:	01 c0       	rjmp	.+2      	; 0x604 <ToggleLED+0xce>
     602:	d0 e0       	ldi	r29, 0x00	; 0
     604:	21 ff       	sbrs	r18, 1
     606:	02 c0       	rjmp	.+4      	; 0x60c <ToggleLED+0xd6>
     608:	8f e0       	ldi	r24, 0x0F	; 15
     60a:	01 c0       	rjmp	.+2      	; 0x60e <ToggleLED+0xd8>
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	d8 2b       	or	r29, r24
     610:	2f c0       	rjmp	.+94     	; 0x670 <ToggleLED+0x13a>
     612:	ce 5c       	subi	r28, 0xCE	; 206
     614:	46 2f       	mov	r20, r22
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	fc 01       	movw	r30, r24
     61a:	e4 0f       	add	r30, r20
     61c:	f5 1f       	adc	r31, r21
     61e:	20 81       	ld	r18, Z
     620:	31 e0       	ldi	r19, 0x01	; 1
     622:	32 27       	eor	r19, r18
     624:	31 70       	andi	r19, 0x01	; 1
     626:	26 70       	andi	r18, 0x06	; 6
     628:	23 2b       	or	r18, r19
     62a:	20 83       	st	Z, r18
     62c:	60 ff       	sbrs	r22, 0
     62e:	11 c0       	rjmp	.+34     	; 0x652 <ToggleLED+0x11c>
     630:	20 ff       	sbrs	r18, 0
     632:	02 c0       	rjmp	.+4      	; 0x638 <ToggleLED+0x102>
     634:	d0 ef       	ldi	r29, 0xF0	; 240
     636:	01 c0       	rjmp	.+2      	; 0x63a <ToggleLED+0x104>
     638:	d0 e0       	ldi	r29, 0x00	; 0
     63a:	84 0f       	add	r24, r20
     63c:	95 1f       	adc	r25, r21
     63e:	fc 01       	movw	r30, r24
     640:	31 97       	sbiw	r30, 0x01	; 1
     642:	80 81       	ld	r24, Z
     644:	80 ff       	sbrs	r24, 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <ToggleLED+0x116>
     648:	8f e0       	ldi	r24, 0x0F	; 15
     64a:	01 c0       	rjmp	.+2      	; 0x64e <ToggleLED+0x118>
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	d8 2b       	or	r29, r24
     650:	0f c0       	rjmp	.+30     	; 0x670 <ToggleLED+0x13a>
     652:	fc 01       	movw	r30, r24
     654:	e4 0f       	add	r30, r20
     656:	f5 1f       	adc	r31, r21
     658:	81 81       	ldd	r24, Z+1	; 0x01
     65a:	80 ff       	sbrs	r24, 0
     65c:	02 c0       	rjmp	.+4      	; 0x662 <ToggleLED+0x12c>
     65e:	d0 ef       	ldi	r29, 0xF0	; 240
     660:	01 c0       	rjmp	.+2      	; 0x664 <ToggleLED+0x12e>
     662:	d0 e0       	ldi	r29, 0x00	; 0
     664:	20 ff       	sbrs	r18, 0
     666:	02 c0       	rjmp	.+4      	; 0x66c <ToggleLED+0x136>
     668:	8f e0       	ldi	r24, 0x0F	; 15
     66a:	01 c0       	rjmp	.+2      	; 0x66e <ToggleLED+0x138>
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	d8 2b       	or	r29, r24
     670:	8c 2f       	mov	r24, r28
     672:	0e 94 c1 01 	call	0x382	; 0x382 <CS_low>
     676:	80 e4       	ldi	r24, 0x40	; 64
     678:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
     67c:	8d 2f       	mov	r24, r29
     67e:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
     682:	8c 2f       	mov	r24, r28
     684:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <CS_high>
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <SetLEDBrightness>:
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	c8 2f       	mov	r28, r24
     696:	c6 95       	lsr	r28
     698:	67 34       	cpi	r22, 0x47	; 71
     69a:	29 f0       	breq	.+10     	; 0x6a6 <SetLEDBrightness+0x18>
     69c:	62 35       	cpi	r22, 0x52	; 82
     69e:	31 f0       	breq	.+12     	; 0x6ac <SetLEDBrightness+0x1e>
     6a0:	62 34       	cpi	r22, 0x42	; 66
     6a2:	b1 f4       	brne	.+44     	; 0x6d0 <SetLEDBrightness+0x42>
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <SetLEDBrightness+0x1c>
     6a6:	c7 5e       	subi	r28, 0xE7	; 231
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <SetLEDBrightness+0x1e>
     6aa:	ce 5c       	subi	r28, 0xCE	; 206
     6ac:	80 ff       	sbrs	r24, 0
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <SetLEDBrightness+0x26>
     6b0:	10 e1       	ldi	r17, 0x10	; 16
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <SetLEDBrightness+0x28>
     6b4:	10 e0       	ldi	r17, 0x00	; 0
     6b6:	d4 2f       	mov	r29, r20
     6b8:	8c 2f       	mov	r24, r28
     6ba:	0e 94 c1 01 	call	0x382	; 0x382 <CS_low>
     6be:	81 2f       	mov	r24, r17
     6c0:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
     6c4:	8d 2f       	mov	r24, r29
     6c6:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
     6ca:	8c 2f       	mov	r24, r28
     6cc:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <CS_high>
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	08 95       	ret

000006d8 <Read_LMP_Status>:
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	18 2f       	mov	r17, r24
     6e0:	eb 01       	movw	r28, r22
     6e2:	0e 94 c1 01 	call	0x382	; 0x382 <CS_low>
     6e6:	8f ec       	ldi	r24, 0xCF	; 207
     6e8:	97 e0       	ldi	r25, 0x07	; 7
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <Read_LMP_Status+0x12>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <Read_LMP_Status+0x18>
     6f0:	00 00       	nop
     6f2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     6f6:	80 e9       	ldi	r24, 0x90	; 144
     6f8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     702:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     706:	8f ec       	ldi	r24, 0xCF	; 207
     708:	97 e0       	ldi	r25, 0x07	; 7
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	f1 f7       	brne	.-4      	; 0x70a <Read_LMP_Status+0x32>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <Read_LMP_Status+0x38>
     710:	00 00       	nop
     712:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     716:	81 e9       	ldi	r24, 0x91	; 145
     718:	0e 94 de 00 	call	0x1bc	; 0x1bc <TWI_read_address>
     71c:	ce 01       	movw	r24, r28
     71e:	0e 94 ed 00 	call	0x1da	; 0x1da <TWI_read_data>
     722:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     726:	8f ec       	ldi	r24, 0xCF	; 207
     728:	97 e0       	ldi	r25, 0x07	; 7
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <Read_LMP_Status+0x52>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <Read_LMP_Status+0x58>
     730:	00 00       	nop
     732:	88 81       	ld	r24, Y
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	69 f7       	brne	.-38     	; 0x712 <Read_LMP_Status+0x3a>
     738:	81 2f       	mov	r24, r17
     73a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <CS_high>
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	08 95       	ret

00000746 <Prog_LMP>:
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	c8 2f       	mov	r28, r24
     74e:	16 2f       	mov	r17, r22
     750:	d4 2f       	mov	r29, r20
     752:	0e 94 c1 01 	call	0x382	; 0x382 <CS_low>
     756:	8f ec       	ldi	r24, 0xCF	; 207
     758:	97 e0       	ldi	r25, 0x07	; 7
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <Prog_LMP+0x14>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <Prog_LMP+0x1a>
     760:	00 00       	nop
     762:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     766:	80 e9       	ldi	r24, 0x90	; 144
     768:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     76c:	81 2f       	mov	r24, r17
     76e:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     772:	8d 2f       	mov	r24, r29
     774:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     778:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     77c:	8f ec       	ldi	r24, 0xCF	; 207
     77e:	97 e0       	ldi	r25, 0x07	; 7
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <Prog_LMP+0x3a>
     784:	00 c0       	rjmp	.+0      	; 0x786 <Prog_LMP+0x40>
     786:	00 00       	nop
     788:	8c 2f       	mov	r24, r28
     78a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <CS_high>
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	08 95       	ret

00000796 <Set_LMP_Unlock>:
     796:	cf 93       	push	r28
     798:	c8 2f       	mov	r28, r24
     79a:	0e 94 c1 01 	call	0x382	; 0x382 <CS_low>
     79e:	8f ec       	ldi	r24, 0xCF	; 207
     7a0:	97 e0       	ldi	r25, 0x07	; 7
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <Set_LMP_Unlock+0xc>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <Set_LMP_Unlock+0x12>
     7a8:	00 00       	nop
     7aa:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
     7ae:	80 e9       	ldi	r24, 0x90	; 144
     7b0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
     7c0:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     7c4:	8f ec       	ldi	r24, 0xCF	; 207
     7c6:	97 e0       	ldi	r25, 0x07	; 7
     7c8:	01 97       	sbiw	r24, 0x01	; 1
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <Set_LMP_Unlock+0x32>
     7cc:	00 c0       	rjmp	.+0      	; 0x7ce <Set_LMP_Unlock+0x38>
     7ce:	00 00       	nop
     7d0:	8c 2f       	mov	r24, r28
     7d2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <CS_high>
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <Set_LMP_Temperature>:
	
}

void Set_LMP_Temperature(uint8_t ID)
{
     7da:	cf 93       	push	r28
     7dc:	c8 2f       	mov	r28, r24
	CS_low(ID);
     7de:	0e 94 c1 01 	call	0x382	; 0x382 <CS_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e2:	8f ec       	ldi	r24, 0xCF	; 207
     7e4:	97 e0       	ldi	r25, 0x07	; 7
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <Set_LMP_Temperature+0xc>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <Set_LMP_Temperature+0x12>
     7ec:	00 00       	nop
	_delay_ms(1);

	TWI_start();
     7ee:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TWI_start>
	TWI_write_address(LMP_WRITE_ADDR);
     7f2:	80 e9       	ldi	r24, 0x90	; 144
     7f4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <TWI_write_address>
	TWI_write_data(0x12);
     7f8:	82 e1       	ldi	r24, 0x12	; 18
     7fa:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
	TWI_write_data(0x06);
     7fe:	86 e0       	ldi	r24, 0x06	; 6
     800:	0e 94 0d 01 	call	0x21a	; 0x21a <TWI_write_data>
	TWI_stop();
     804:	0e 94 1c 01 	call	0x238	; 0x238 <TWI_stop>
     808:	8f ec       	ldi	r24, 0xCF	; 207
     80a:	97 e0       	ldi	r25, 0x07	; 7
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	f1 f7       	brne	.-4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     810:	00 c0       	rjmp	.+0      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     812:	00 00       	nop
	_delay_ms(1);
	
	CS_high(ID);
     814:	8c 2f       	mov	r24, r28
     816:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <CS_high>
}
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <Read_ADC>:

uint16_t Read_ADC(uint8_t adc, uint8_t channel)
{
     81e:	cf 93       	push	r28
	uint8_t analogL;
	uint8_t opcode; 
	uint16_t temp = 0;
	
	opcode = 0x01;
	PORTD = !(1 << (2 + adc));
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	02 96       	adiw	r24, 0x02	; 2
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	a9 01       	movw	r20, r18
     82a:	02 c0       	rjmp	.+4      	; 0x830 <Read_ADC+0x12>
     82c:	44 0f       	add	r20, r20
     82e:	55 1f       	adc	r21, r21
     830:	8a 95       	dec	r24
     832:	e2 f7       	brpl	.-8      	; 0x82c <Read_ADC+0xe>
     834:	ca 01       	movw	r24, r20
     836:	89 2b       	or	r24, r25
     838:	09 f0       	breq	.+2      	; 0x83c <Read_ADC+0x1e>
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	2b b9       	out	0x0b, r18	; 11
	
	SPI_Write(opcode);
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
	//opcode |= (channel << 4);
	opcode = 0b10000000;
	analogH = SPI_Transceiver(opcode);
     844:	80 e8       	ldi	r24, 0x80	; 128
     846:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_Transceiver>
	analogH = (analogH & 0b00000011);
     84a:	c8 2f       	mov	r28, r24
     84c:	c3 70       	andi	r28, 0x03	; 3
	analogL = SPI_Transceiver(0);
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_Transceiver>
	PORTD = 0xFF;
     854:	9f ef       	ldi	r25, 0xFF	; 255
     856:	9b b9       	out	0x0b, r25	; 11
	
	temp = (analogH << 8) + analogL;
     858:	2c 2f       	mov	r18, r28
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	32 2f       	mov	r19, r18
     85e:	22 27       	eor	r18, r18
	
	return temp;
     860:	a9 01       	movw	r20, r18
     862:	48 0f       	add	r20, r24
     864:	51 1d       	adc	r21, r1
     866:	ca 01       	movw	r24, r20
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <DAC_Program>:
#define I2C_RST PINC0

#define DAC_STEP 0x10

void DAC_Program(uint8_t hi, uint8_t lo)
{
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	d6 2f       	mov	r29, r22
	PORTB ^= (1 << DAC_SEL);
     872:	95 b1       	in	r25, 0x05	; 5
     874:	c1 e0       	ldi	r28, 0x01	; 1
     876:	9c 27       	eor	r25, r28
     878:	95 b9       	out	0x05, r25	; 5
	SPI_Write(hi);
     87a:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
	SPI_Write(lo);
     87e:	8d 2f       	mov	r24, r29
     880:	0e 94 c0 00 	call	0x180	; 0x180 <SPI_Write>
	PORTB ^= (1 << DAC_SEL);
     884:	85 b1       	in	r24, 0x05	; 5
     886:	c8 27       	eor	r28, r24
     888:	c5 b9       	out	0x05, r28	; 5
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <ascii_dec>:

uint8_t ascii_dec(char ascii[], uint8_t count){
     890:	ac 01       	movw	r20, r24
	uint8_t val = 0;
	for (uint8_t i = 0; i < count; i ++){
     892:	20 e0       	ldi	r18, 0x00	; 0
	SPI_Write(lo);
	PORTB ^= (1 << DAC_SEL);
}

uint8_t ascii_dec(char ascii[], uint8_t count){
	uint8_t val = 0;
     894:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < count; i ++){
     896:	0c c0       	rjmp	.+24     	; 0x8b0 <ascii_dec+0x20>
		val = val * 10;
     898:	88 0f       	add	r24, r24
     89a:	98 2f       	mov	r25, r24
     89c:	99 0f       	add	r25, r25
     89e:	99 0f       	add	r25, r25
     8a0:	89 0f       	add	r24, r25
		val += ascii[i] - 0x30;
     8a2:	fa 01       	movw	r30, r20
     8a4:	e2 0f       	add	r30, r18
     8a6:	f1 1d       	adc	r31, r1
     8a8:	90 81       	ld	r25, Z
     8aa:	89 0f       	add	r24, r25
     8ac:	80 53       	subi	r24, 0x30	; 48
	PORTB ^= (1 << DAC_SEL);
}

uint8_t ascii_dec(char ascii[], uint8_t count){
	uint8_t val = 0;
	for (uint8_t i = 0; i < count; i ++){
     8ae:	2f 5f       	subi	r18, 0xFF	; 255
     8b0:	26 17       	cp	r18, r22
     8b2:	90 f3       	brcs	.-28     	; 0x898 <ascii_dec+0x8>
		val = val * 10;
		val += ascii[i] - 0x30;
	}
	return val;
}
     8b4:	08 95       	ret

000008b6 <main>:

int main(){
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	c1 59       	subi	r28, 0x91	; 145
     8c0:	d1 09       	sbc	r29, r1
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
	uint32_t data_temp = 0;
	uint16_t DAC_value = 0;
	uint16_t temp = 0;
	uint8_t LED[LED_COUNT] = {0};
     8cc:	8e 01       	movw	r16, r28
     8ce:	0f 5f       	subi	r16, 0xFF	; 255
     8d0:	1f 4f       	sbci	r17, 0xFF	; 255
     8d2:	82 e3       	ldi	r24, 0x32	; 50
     8d4:	d8 01       	movw	r26, r16
     8d6:	1d 92       	st	X+, r1
     8d8:	8a 95       	dec	r24
     8da:	e9 f7       	brne	.-6      	; 0x8d6 <main+0x20>
	uint8_t DAC_hi;
	uint8_t DAC_lo;
	uint8_t lvl;
	uint8_t pot;
	
	uint16_t results[46] = {0};
     8dc:	fe 01       	movw	r30, r28
     8de:	f3 96       	adiw	r30, 0x33	; 51
     8e0:	8c e5       	ldi	r24, 0x5C	; 92
     8e2:	df 01       	movw	r26, r30
     8e4:	1d 92       	st	X+, r1
     8e6:	8a 95       	dec	r24
     8e8:	e9 f7       	brne	.-6      	; 0x8e4 <main+0x2e>
	char dir;
	char num;
	char potID;

	// DDR Setup
	DDRB = (1 << IO_EN_0) | (1 << DAC_SEL) | (1 << SS)  | (1 << MOSI) | (1 << SCK);
     8ea:	8f e2       	ldi	r24, 0x2F	; 47
     8ec:	84 b9       	out	0x04, r24	; 4
	PORTB =  (1 << DAC_SEL);
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	85 b9       	out	0x05, r24	; 5
	
	DDRC = (1 << I2C_RST);
     8f2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xFF;
     8f4:	8f ef       	ldi	r24, 0xFF	; 255
     8f6:	88 b9       	out	0x08, r24	; 8
	
	DDRD  = 0xFF;
     8f8:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
     8fa:	8b b9       	out	0x0b, r24	; 11
	
	UART_init();
     8fc:	0e 94 89 00 	call	0x112	; 0x112 <UART_init>
	UART_SendString("\r\nConfiguring SPI interface...");
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
	SPI_Init();
     908:	0e 94 b9 00 	call	0x172	; 0x172 <SPI_Init>
	UART_SendString("DONE!");
     90c:	8f e1       	ldi	r24, 0x1F	; 31
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
	
	UART_SendString("\r\nConfiguring TWI interface...");
     914:	85 e2       	ldi	r24, 0x25	; 37
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
	TWI_init_master();
     91c:	0e 94 cb 00 	call	0x196	; 0x196 <TWI_init_master>
	UART_SendString("DONE!");
     920:	8f e1       	ldi	r24, 0x1F	; 31
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
	
	UART_SendString("\r\nConfiguring IO Expanders...");
     928:	84 e4       	ldi	r24, 0x44	; 68
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
	Init_IOX();
     930:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Init_IOX>
	UART_SendString("DONE!");
     934:	8f e1       	ldi	r24, 0x1F	; 31
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>

	UART_SendString("\r\nTurning Off LEDs...");
     93c:	82 e6       	ldi	r24, 0x62	; 98
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
	LED_all_off(LED);
     944:	c8 01       	movw	r24, r16
     946:	0e 94 2b 02 	call	0x456	; 0x456 <LED_all_off>
	UART_SendString("DONE!");
     94a:	8f e1       	ldi	r24, 0x1F	; 31
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
	
	for(uint8_t x = 0; x < 8; x ++)
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	2a c0       	rjmp	.+84     	; 0x9aa <__stack+0xab>
	{
		if (x == 2 || x == 4){			//Potentiostat U3 not working
     956:	12 30       	cpi	r17, 0x02	; 2
     958:	39 f1       	breq	.+78     	; 0x9a8 <__stack+0xa9>
     95a:	14 30       	cpi	r17, 0x04	; 4
     95c:	29 f1       	breq	.+74     	; 0x9a8 <__stack+0xa9>
     95e:	ef e1       	ldi	r30, 0x1F	; 31
     960:	fe e4       	ldi	r31, 0x4E	; 78
     962:	31 97       	sbiw	r30, 0x01	; 1
     964:	f1 f7       	brne	.-4      	; 0x962 <__stack+0x63>
     966:	00 c0       	rjmp	.+0      	; 0x968 <__stack+0x69>
     968:	00 00       	nop
			continue;
		}
		_delay_ms(10);
		Read_LMP_Status(x, &tmp);
     96a:	be 01       	movw	r22, r28
     96c:	61 57       	subi	r22, 0x71	; 113
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	81 2f       	mov	r24, r17
     972:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <Read_LMP_Status>
		UART_SendString("\r\nUNLOCKING LM91000 ");
     976:	88 e7       	ldi	r24, 0x78	; 120
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
		UART_TxChar(0x30 + x);
     97e:	80 e3       	ldi	r24, 0x30	; 48
     980:	81 0f       	add	r24, r17
     982:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
		UART_SendString("...");
     986:	8b e1       	ldi	r24, 0x1B	; 27
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
		Set_LMP_Unlock(x);
     98e:	81 2f       	mov	r24, r17
     990:	0e 94 cb 03 	call	0x796	; 0x796 <Set_LMP_Unlock>
		UART_SendString("DONE");
     994:	8d e8       	ldi	r24, 0x8D	; 141
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
     99c:	8f e1       	ldi	r24, 0x1F	; 31
     99e:	9e e4       	ldi	r25, 0x4E	; 78
     9a0:	01 97       	sbiw	r24, 0x01	; 1
     9a2:	f1 f7       	brne	.-4      	; 0x9a0 <__stack+0xa1>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <__stack+0xa7>
     9a6:	00 00       	nop

	UART_SendString("\r\nTurning Off LEDs...");
	LED_all_off(LED);
	UART_SendString("DONE!");
	
	for(uint8_t x = 0; x < 8; x ++)
     9a8:	1f 5f       	subi	r17, 0xFF	; 255
     9aa:	18 30       	cpi	r17, 0x08	; 8
     9ac:	a0 f2       	brcs	.-88     	; 0x956 <__stack+0x57>
		UART_SendString("...");
		Set_LMP_Unlock(x);
		UART_SendString("DONE");
		_delay_ms(10);
	}
	UART_SendString("\r\n\n");
     9ae:	82 e9       	ldi	r24, 0x92	; 146
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
	
	UART_SendString("\n\rOPTOGENETIC DEVICE READY!\n\r");
     9b6:	86 e9       	ldi	r24, 0x96	; 150
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>


	// MAIN EXECUTION LOOP
	while(1)
	{
		UART_SendString("\r\ncmd>");
     9be:	84 eb       	ldi	r24, 0xB4	; 180
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
		//Wait until data has been received
		opcode = UART_RxChar();
     9c6:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
     9ca:	18 2f       	mov	r17, r24
		UART_TxChar(opcode);
     9cc:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>

		switch(opcode){
     9d0:	81 2f       	mov	r24, r17
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	fc 01       	movw	r30, r24
     9d6:	e1 54       	subi	r30, 0x41	; 65
     9d8:	f1 09       	sbc	r31, r1
     9da:	e8 31       	cpi	r30, 0x18	; 24
     9dc:	f1 05       	cpc	r31, r1
     9de:	08 f0       	brcs	.+2      	; 0x9e2 <__stack+0xe3>
     9e0:	bf c2       	rjmp	.+1406   	; 0xf60 <__stack+0x661>
     9e2:	e6 5a       	subi	r30, 0xA6	; 166
     9e4:	ff 4f       	sbci	r31, 0xFF	; 255
     9e6:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__tablejump2__>
			//Toggle LED
			case 'L':
			//UART_SendString("\n\rSELECT LED>");
			id[0] = UART_RxChar();
     9ea:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
     9ee:	c0 57       	subi	r28, 0x70	; 112
     9f0:	df 4f       	sbci	r29, 0xFF	; 255
     9f2:	88 83       	st	Y, r24
     9f4:	c0 59       	subi	r28, 0x90	; 144
     9f6:	d0 40       	sbci	r29, 0x00	; 0
			//UART_TxChar(id[0]);
			id[1] = UART_RxChar();
     9f8:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
     9fc:	cf 56       	subi	r28, 0x6F	; 111
     9fe:	df 4f       	sbci	r29, 0xFF	; 255
     a00:	88 83       	st	Y, r24
     a02:	c1 59       	subi	r28, 0x91	; 145
     a04:	d0 40       	sbci	r29, 0x00	; 0
			//UART_TxChar(id[1]);
			ledID = ascii_dec(id, 2);
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	ce 01       	movw	r24, r28
     a0a:	80 57       	subi	r24, 0x70	; 112
     a0c:	9f 4f       	sbci	r25, 0xFF	; 255
     a0e:	0e 94 48 04 	call	0x890	; 0x890 <ascii_dec>
     a12:	18 2f       	mov	r17, r24
			//UART_SendString("\n\rSELECT COLOUR>");
			colour = UART_RxChar();
     a14:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
			//UART_TxChar(colour);

			ToggleLED(LED, ledID, colour);
     a18:	48 2f       	mov	r20, r24
     a1a:	61 2f       	mov	r22, r17
     a1c:	ce 01       	movw	r24, r28
     a1e:	01 96       	adiw	r24, 0x01	; 1
     a20:	0e 94 9b 02 	call	0x536	; 0x536 <ToggleLED>
			break;
     a24:	cc cf       	rjmp	.-104    	; 0x9be <__stack+0xbf>
			DAC_value = 0;
			uint16_t offset = 1000;
			//UART_SendString("\n\rSelect Direction (value 0000 - 4095) >");
			for (uint8_t i = 0; i < 4; i ++)
			{
				dir = UART_RxChar();
     a26:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
				//UART_TxChar(dir);
				DAC_value += offset * (dir - 0x30);
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	c0 97       	sbiw	r24, 0x30	; 48
     a2e:	8e 9d       	mul	r24, r14
     a30:	90 01       	movw	r18, r0
     a32:	8f 9d       	mul	r24, r15
     a34:	30 0d       	add	r19, r0
     a36:	9e 9d       	mul	r25, r14
     a38:	30 0d       	add	r19, r0
     a3a:	11 24       	eor	r1, r1
     a3c:	c2 0e       	add	r12, r18
     a3e:	d3 1e       	adc	r13, r19
				offset /= 10;
     a40:	97 01       	movw	r18, r14
     a42:	ad ec       	ldi	r26, 0xCD	; 205
     a44:	bc ec       	ldi	r27, 0xCC	; 204
     a46:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__umulhisi3>
     a4a:	7c 01       	movw	r14, r24
     a4c:	f6 94       	lsr	r15
     a4e:	e7 94       	ror	r14
     a50:	f6 94       	lsr	r15
     a52:	e7 94       	ror	r14
     a54:	f6 94       	lsr	r15
     a56:	e7 94       	ror	r14
			//Change DAC value
			case 'D':
			DAC_value = 0;
			uint16_t offset = 1000;
			//UART_SendString("\n\rSelect Direction (value 0000 - 4095) >");
			for (uint8_t i = 0; i < 4; i ++)
     a58:	1f 5f       	subi	r17, 0xFF	; 255
     a5a:	09 c0       	rjmp	.+18     	; 0xa6e <__stack+0x16f>
		UART_SendString("\r\ncmd>");
		//Wait until data has been received
		opcode = UART_RxChar();
		UART_TxChar(opcode);

		switch(opcode){
     a5c:	10 e0       	ldi	r17, 0x00	; 0
     a5e:	0f 2e       	mov	r0, r31
     a60:	f8 ee       	ldi	r31, 0xE8	; 232
     a62:	ef 2e       	mov	r14, r31
     a64:	f3 e0       	ldi	r31, 0x03	; 3
     a66:	ff 2e       	mov	r15, r31
     a68:	f0 2d       	mov	r31, r0
     a6a:	c1 2c       	mov	r12, r1
     a6c:	d1 2c       	mov	r13, r1
			//Change DAC value
			case 'D':
			DAC_value = 0;
			uint16_t offset = 1000;
			//UART_SendString("\n\rSelect Direction (value 0000 - 4095) >");
			for (uint8_t i = 0; i < 4; i ++)
     a6e:	14 30       	cpi	r17, 0x04	; 4
     a70:	d0 f2       	brcs	.-76     	; 0xa26 <__stack+0x127>
				DAC_value += offset * (dir - 0x30);
				offset /= 10;
			}

			//UART_SendString("\n\rSending DAC command...");
			DAC_hi = 0b00110000 | ((DAC_value & 0x3C0) >> 6);
     a72:	c6 01       	movw	r24, r12
     a74:	80 7c       	andi	r24, 0xC0	; 192
     a76:	93 70       	andi	r25, 0x03	; 3
     a78:	00 24       	eor	r0, r0
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	00 1c       	adc	r0, r0
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	00 1c       	adc	r0, r0
     a86:	89 2f       	mov	r24, r25
     a88:	90 2d       	mov	r25, r0
			DAC_lo = (DAC_value & 0x3F) << 2;
     a8a:	6c 2d       	mov	r22, r12
     a8c:	66 0f       	add	r22, r22
     a8e:	66 0f       	add	r22, r22
			DAC_Program(DAC_hi, DAC_lo);
     a90:	80 63       	ori	r24, 0x30	; 48
     a92:	0e 94 36 04 	call	0x86c	; 0x86c <DAC_Program>
			break;
     a96:	93 cf       	rjmp	.-218    	; 0x9be <__stack+0xbf>
			
			//Change intensity of LEDs
			case 'R':
			//UART_SendString("\n\rSELECT LED>");
			id[0] = UART_RxChar();
     a98:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
     a9c:	c0 57       	subi	r28, 0x70	; 112
     a9e:	df 4f       	sbci	r29, 0xFF	; 255
     aa0:	88 83       	st	Y, r24
     aa2:	c0 59       	subi	r28, 0x90	; 144
     aa4:	d0 40       	sbci	r29, 0x00	; 0
			//UART_TxChar(id[0]);
			id[1] = UART_RxChar();
     aa6:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
     aaa:	cf 56       	subi	r28, 0x6F	; 111
     aac:	df 4f       	sbci	r29, 0xFF	; 255
     aae:	88 83       	st	Y, r24
     ab0:	c1 59       	subi	r28, 0x91	; 145
     ab2:	d0 40       	sbci	r29, 0x00	; 0
			//UART_TxChar(id[1]);
			ledID = ascii_dec(id, 2);
     ab4:	62 e0       	ldi	r22, 0x02	; 2
     ab6:	ce 01       	movw	r24, r28
     ab8:	80 57       	subi	r24, 0x70	; 112
     aba:	9f 4f       	sbci	r25, 0xFF	; 255
     abc:	0e 94 48 04 	call	0x890	; 0x890 <ascii_dec>
     ac0:	f8 2e       	mov	r15, r24
			//UART_SendString("\n\rSELECT COLOUR>");
			colour = UART_RxChar();
     ac2:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
     ac6:	e8 2e       	mov	r14, r24
			//UART_TxChar(colour);
			
			//UART_SendString("\n\rSET RESISTANCE (NNN; 000-255)>");
			num = UART_RxChar();
     ac8:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
			//UART_TxChar(num);
			lvl = (num - 0x30) * 100;
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	c0 97       	sbiw	r24, 0x30	; 48
     ad0:	14 e6       	ldi	r17, 0x64	; 100
     ad2:	81 9f       	mul	r24, r17
     ad4:	00 2d       	mov	r16, r0
     ad6:	11 24       	eor	r1, r1
			num = UART_RxChar();
     ad8:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
			//UART_TxChar(num);
			lvl += (num - 0x30) * 10;
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	c0 97       	sbiw	r24, 0x30	; 48
     ae0:	88 0f       	add	r24, r24
     ae2:	18 2f       	mov	r17, r24
     ae4:	11 0f       	add	r17, r17
     ae6:	11 0f       	add	r17, r17
     ae8:	81 0f       	add	r24, r17
     aea:	18 2f       	mov	r17, r24
     aec:	10 0f       	add	r17, r16
			num = UART_RxChar();
     aee:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
			//UART_TxChar(num);
			lvl += (num - 0x30);
     af2:	81 0f       	add	r24, r17
     af4:	40 ed       	ldi	r20, 0xD0	; 208
     af6:	48 0f       	add	r20, r24
			
			SetLEDBrightness(ledID, colour, lvl);
     af8:	6e 2d       	mov	r22, r14
     afa:	8f 2d       	mov	r24, r15
     afc:	0e 94 47 03 	call	0x68e	; 0x68e <SetLEDBrightness>
			break;
     b00:	5e cf       	rjmp	.-324    	; 0x9be <__stack+0xbf>
			
			//Turn off all LEDs
			case 'X':
			//UART_SendString("\r\nResetting all LEDs!");
			LED_all_off(LED);
     b02:	ce 01       	movw	r24, r28
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	0e 94 2b 02 	call	0x456	; 0x456 <LED_all_off>
			break;
     b0a:	59 cf       	rjmp	.-334    	; 0x9be <__stack+0xbf>
			
			//Turn on all LEDs of a colour
			case 'A':
			//UART_SendString("\n\rSELECT COLOUR>");
			colour = UART_RxChar();
     b0c:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
			//UART_TxChar(colour);
			
			LED_all_on(LED, colour);
     b10:	68 2f       	mov	r22, r24
     b12:	ce 01       	movw	r24, r28
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	0e 94 51 02 	call	0x4a2	; 0x4a2 <LED_all_on>
			break;
     b1a:	51 cf       	rjmp	.-350    	; 0x9be <__stack+0xbf>
			//Show Temperature of potentiostat
			case 'T':
			data_temp = 0;
			temp = 0;
			
			UART_SendString("\n\rSELECT POTENTIOSTAT (0-7) - EXCEPT 2>");
     b1c:	8b eb       	ldi	r24, 0xBB	; 187
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
			potID = UART_RxChar();
     b24:	0e 94 98 00 	call	0x130	; 0x130 <UART_RxChar>
     b28:	b8 2e       	mov	r11, r24
			UART_TxChar(potID);
     b2a:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
			pot = potID - 0x30;
     b2e:	00 ed       	ldi	r16, 0xD0	; 208
     b30:	0b 0d       	add	r16, r11
			
			if ((pot > 7) | (pot == 2)){
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	08 30       	cpi	r16, 0x08	; 8
     b36:	08 f4       	brcc	.+2      	; 0xb3a <__stack+0x23b>
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	02 30       	cpi	r16, 0x02	; 2
     b3e:	09 f0       	breq	.+2      	; 0xb42 <__stack+0x243>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	89 2b       	or	r24, r25
     b44:	29 f0       	breq	.+10     	; 0xb50 <__stack+0x251>
				UART_SendString("\n\rNOT A VALID ID OR POTENTIOSTAT OUT OF ORDER!");
     b46:	83 ee       	ldi	r24, 0xE3	; 227
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
				break;
     b4e:	37 cf       	rjmp	.-402    	; 0x9be <__stack+0xbf>
			}
			
			Set_LMP_Temperature(pot);
     b50:	80 2f       	mov	r24, r16
     b52:	0e 94 ed 03 	call	0x7da	; 0x7da <Set_LMP_Temperature>
			
			//Take an average measurement
			for(uint8_t i = 0; i < 16; i++)
     b56:	10 e0       	ldi	r17, 0x00	; 0
			LED_all_on(LED, colour);
			break;
			
			//Show Temperature of potentiostat
			case 'T':
			data_temp = 0;
     b58:	c1 2c       	mov	r12, r1
     b5a:	d1 2c       	mov	r13, r1
     b5c:	76 01       	movw	r14, r12
			}
			
			Set_LMP_Temperature(pot);
			
			//Take an average measurement
			for(uint8_t i = 0; i < 16; i++)
     b5e:	09 c0       	rjmp	.+18     	; 0xb72 <__stack+0x273>
			{
				temp = Read_ADC(0, pot);
     b60:	60 2f       	mov	r22, r16
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 0f 04 	call	0x81e	; 0x81e <Read_ADC>
				data_temp = data_temp + temp;
     b68:	c8 0e       	add	r12, r24
     b6a:	d9 1e       	adc	r13, r25
     b6c:	e1 1c       	adc	r14, r1
     b6e:	f1 1c       	adc	r15, r1
			}
			
			Set_LMP_Temperature(pot);
			
			//Take an average measurement
			for(uint8_t i = 0; i < 16; i++)
     b70:	1f 5f       	subi	r17, 0xFF	; 255
     b72:	10 31       	cpi	r17, 0x10	; 16
     b74:	a8 f3       	brcs	.-22     	; 0xb60 <__stack+0x261>
			{
				temp = Read_ADC(0, pot);
				data_temp = data_temp + temp;
			}
			data_temp = data_temp / 16;
     b76:	26 01       	movw	r4, r12
     b78:	37 01       	movw	r6, r14
     b7a:	68 94       	set
     b7c:	13 f8       	bld	r1, 3
     b7e:	76 94       	lsr	r7
     b80:	67 94       	ror	r6
     b82:	57 94       	ror	r5
     b84:	47 94       	ror	r4
     b86:	16 94       	lsr	r1
     b88:	d1 f7       	brne	.-12     	; 0xb7e <__stack+0x27f>
			
			PORTD = 0xFF;
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	8b b9       	out	0x0b, r24	; 11
			UART_SendString("\n\rCH");
     b8e:	82 e1       	ldi	r24, 0x12	; 18
     b90:	92 e0       	ldi	r25, 0x02	; 2
     b92:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
			UART_TxChar(potID);
     b96:	8b 2d       	mov	r24, r11
     b98:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
			UART_SendString(" : ");
     b9c:	87 e1       	ldi	r24, 0x17	; 23
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
			UART_TxChar(0x30 + (data_temp / 1000) );
     ba4:	c7 01       	movw	r24, r14
     ba6:	b6 01       	movw	r22, r12
     ba8:	20 e8       	ldi	r18, 0x80	; 128
     baa:	3e e3       	ldi	r19, 0x3E	; 62
     bac:	40 e0       	ldi	r20, 0x00	; 0
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	0e 94 c9 07 	call	0xf92	; 0xf92 <__udivmodsi4>
     bb4:	80 e3       	ldi	r24, 0x30	; 48
     bb6:	82 0f       	add	r24, r18
     bb8:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
			UART_TxChar(0x30 + ((data_temp % 1000) / 100) );
     bbc:	c3 01       	movw	r24, r6
     bbe:	b2 01       	movw	r22, r4
     bc0:	28 ee       	ldi	r18, 0xE8	; 232
     bc2:	33 e0       	ldi	r19, 0x03	; 3
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	0e 94 c9 07 	call	0xf92	; 0xf92 <__udivmodsi4>
     bcc:	0f 2e       	mov	r0, r31
     bce:	f4 e6       	ldi	r31, 0x64	; 100
     bd0:	cf 2e       	mov	r12, r31
     bd2:	d1 2c       	mov	r13, r1
     bd4:	e1 2c       	mov	r14, r1
     bd6:	f1 2c       	mov	r15, r1
     bd8:	f0 2d       	mov	r31, r0
     bda:	a7 01       	movw	r20, r14
     bdc:	96 01       	movw	r18, r12
     bde:	0e 94 c9 07 	call	0xf92	; 0xf92 <__udivmodsi4>
     be2:	80 e3       	ldi	r24, 0x30	; 48
     be4:	82 0f       	add	r24, r18
     be6:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
			UART_TxChar(0x30 + ((data_temp % 100) / 10) );
     bea:	c3 01       	movw	r24, r6
     bec:	b2 01       	movw	r22, r4
     bee:	a7 01       	movw	r20, r14
     bf0:	96 01       	movw	r18, r12
     bf2:	0e 94 c9 07 	call	0xf92	; 0xf92 <__udivmodsi4>
     bf6:	0f 2e       	mov	r0, r31
     bf8:	fa e0       	ldi	r31, 0x0A	; 10
     bfa:	cf 2e       	mov	r12, r31
     bfc:	d1 2c       	mov	r13, r1
     bfe:	e1 2c       	mov	r14, r1
     c00:	f1 2c       	mov	r15, r1
     c02:	f0 2d       	mov	r31, r0
     c04:	a7 01       	movw	r20, r14
     c06:	96 01       	movw	r18, r12
     c08:	0e 94 c9 07 	call	0xf92	; 0xf92 <__udivmodsi4>
     c0c:	80 e3       	ldi	r24, 0x30	; 48
     c0e:	82 0f       	add	r24, r18
     c10:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
			UART_TxChar(0x30 + (data_temp % 10));
     c14:	c3 01       	movw	r24, r6
     c16:	b2 01       	movw	r22, r4
     c18:	a7 01       	movw	r20, r14
     c1a:	96 01       	movw	r18, r12
     c1c:	0e 94 c9 07 	call	0xf92	; 0xf92 <__udivmodsi4>
     c20:	80 e3       	ldi	r24, 0x30	; 48
     c22:	86 0f       	add	r24, r22
     c24:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
			
			UART_SendString("\n\rTEMP READ!\r\n");
     c28:	8b e1       	ldi	r24, 0x1B	; 27
     c2a:	92 e0       	ldi	r25, 0x02	; 2
     c2c:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
			break;
     c30:	c6 ce       	rjmp	.-628    	; 0x9be <__stack+0xbf>
			
			case 'V':
			resultIdx = 0;
			pot = 0;
			Prog_LMP(0, 0x12, 0x02); // FET = Disabled, MODE = Standby
     c32:	42 e0       	ldi	r20, 0x02	; 2
     c34:	62 e1       	ldi	r22, 0x12	; 18
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	0e 94 a3 03 	call	0x746	; 0x746 <Prog_LMP>
     c3c:	9f e7       	ldi	r25, 0x7F	; 127
     c3e:	a8 e3       	ldi	r26, 0x38	; 56
     c40:	b1 e0       	ldi	r27, 0x01	; 1
     c42:	91 50       	subi	r25, 0x01	; 1
     c44:	a0 40       	sbci	r26, 0x00	; 0
     c46:	b0 40       	sbci	r27, 0x00	; 0
     c48:	e1 f7       	brne	.-8      	; 0xc42 <__stack+0x343>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <__stack+0x34d>
     c4c:	00 00       	nop
			_delay_ms(50);
			Prog_LMP(0, 0x10, 0x1F); // TIA_GAIN = 2.75k Ohm, RLOAD = 10 Ohm
     c4e:	4f e1       	ldi	r20, 0x1F	; 31
     c50:	60 e1       	ldi	r22, 0x10	; 16
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	0e 94 a3 03 	call	0x746	; 0x746 <Prog_LMP>
     c58:	ef e7       	ldi	r30, 0x7F	; 127
     c5a:	f8 e3       	ldi	r31, 0x38	; 56
     c5c:	21 e0       	ldi	r18, 0x01	; 1
     c5e:	e1 50       	subi	r30, 0x01	; 1
     c60:	f0 40       	sbci	r31, 0x00	; 0
     c62:	20 40       	sbci	r18, 0x00	; 0
     c64:	e1 f7       	brne	.-8      	; 0xc5e <__stack+0x35f>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <__stack+0x369>
     c68:	00 00       	nop
			_delay_ms(50);
			Prog_LMP(0, 0x11, 0x20); // REF = External, INT_Z = 50%, BIAS_SIGN = Negative, BIAS = 0%
     c6a:	40 e2       	ldi	r20, 0x20	; 32
     c6c:	61 e1       	ldi	r22, 0x11	; 17
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	0e 94 a3 03 	call	0x746	; 0x746 <Prog_LMP>
     c74:	3f e7       	ldi	r19, 0x7F	; 127
     c76:	88 e3       	ldi	r24, 0x38	; 56
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	31 50       	subi	r19, 0x01	; 1
     c7c:	80 40       	sbci	r24, 0x00	; 0
     c7e:	90 40       	sbci	r25, 0x00	; 0
     c80:	e1 f7       	brne	.-8      	; 0xc7a <__stack+0x37b>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <__stack+0x385>
     c84:	00 00       	nop
			_delay_ms(50);
			Prog_LMP(0, 0x12, 0x03); // FET = Disabled, MODE = 3-Lead amperometric
     c86:	43 e0       	ldi	r20, 0x03	; 3
     c88:	62 e1       	ldi	r22, 0x12	; 18
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 a3 03 	call	0x746	; 0x746 <Prog_LMP>
     c90:	af e7       	ldi	r26, 0x7F	; 127
     c92:	b8 e3       	ldi	r27, 0x38	; 56
     c94:	e1 e0       	ldi	r30, 0x01	; 1
     c96:	a1 50       	subi	r26, 0x01	; 1
     c98:	b0 40       	sbci	r27, 0x00	; 0
     c9a:	e0 40       	sbci	r30, 0x00	; 0
     c9c:	e1 f7       	brne	.-8      	; 0xc96 <__stack+0x397>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <__stack+0x3a1>
     ca0:	00 00       	nop
			_delay_ms(50);
			
			for(uint8_t i = 0; i <= 11; i ++)
     ca2:	f1 2c       	mov	r15, r1
			
			UART_SendString("\n\rTEMP READ!\r\n");
			break;
			
			case 'V':
			resultIdx = 0;
     ca4:	b1 2c       	mov	r11, r1
			Prog_LMP(0, 0x11, 0x20); // REF = External, INT_Z = 50%, BIAS_SIGN = Negative, BIAS = 0%
			_delay_ms(50);
			Prog_LMP(0, 0x12, 0x03); // FET = Disabled, MODE = 3-Lead amperometric
			_delay_ms(50);
			
			for(uint8_t i = 0; i <= 11; i ++)
     ca6:	21 c0       	rjmp	.+66     	; 0xcea <__stack+0x3eb>
			{
				Prog_LMP(0, 0x11, 0x20 + i); // REF = External, INT_Z = 50%, BIAS_SIGN = Negative, BIAS = i
     ca8:	40 e2       	ldi	r20, 0x20	; 32
     caa:	4f 0d       	add	r20, r15
     cac:	61 e1       	ldi	r22, 0x11	; 17
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 a3 03 	call	0x746	; 0x746 <Prog_LMP>
     cb4:	ff ef       	ldi	r31, 0xFF	; 255
     cb6:	20 e7       	ldi	r18, 0x70	; 112
     cb8:	32 e0       	ldi	r19, 0x02	; 2
     cba:	f1 50       	subi	r31, 0x01	; 1
     cbc:	20 40       	sbci	r18, 0x00	; 0
     cbe:	30 40       	sbci	r19, 0x00	; 0
     cc0:	e1 f7       	brne	.-8      	; 0xcba <__stack+0x3bb>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <__stack+0x3c5>
     cc4:	00 00       	nop
				_delay_ms(100);
				results[resultIdx] = Read_ADC(0,pot);
     cc6:	0b 2d       	mov	r16, r11
     cc8:	10 e0       	ldi	r17, 0x00	; 0
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	0e 94 0f 04 	call	0x81e	; 0x81e <Read_ADC>
     cd2:	00 0f       	add	r16, r16
     cd4:	11 1f       	adc	r17, r17
     cd6:	e1 e0       	ldi	r30, 0x01	; 1
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	ec 0f       	add	r30, r28
     cdc:	fd 1f       	adc	r31, r29
     cde:	e0 0f       	add	r30, r16
     ce0:	f1 1f       	adc	r31, r17
     ce2:	93 ab       	std	Z+51, r25	; 0x33
     ce4:	82 ab       	std	Z+50, r24	; 0x32
				resultIdx ++;
     ce6:	b3 94       	inc	r11
			Prog_LMP(0, 0x11, 0x20); // REF = External, INT_Z = 50%, BIAS_SIGN = Negative, BIAS = 0%
			_delay_ms(50);
			Prog_LMP(0, 0x12, 0x03); // FET = Disabled, MODE = 3-Lead amperometric
			_delay_ms(50);
			
			for(uint8_t i = 0; i <= 11; i ++)
     ce8:	f3 94       	inc	r15
     cea:	8b e0       	ldi	r24, 0x0B	; 11
     cec:	8f 15       	cp	r24, r15
     cee:	e0 f6       	brcc	.-72     	; 0xca8 <__stack+0x3a9>
     cf0:	0f 2e       	mov	r0, r31
     cf2:	fb e0       	ldi	r31, 0x0B	; 11
     cf4:	ff 2e       	mov	r15, r31
     cf6:	f0 2d       	mov	r31, r0
     cf8:	21 c0       	rjmp	.+66     	; 0xd3c <__stack+0x43d>
				resultIdx ++;
			}
			
			for(uint8_t i = 11; i > 0; i --)
			{
				Prog_LMP(0, 0x11, 0x20 + i); // REF = External, INT_Z = 50%, BIAS_SIGN = Negative, BIAS = i
     cfa:	40 e2       	ldi	r20, 0x20	; 32
     cfc:	4f 0d       	add	r20, r15
     cfe:	61 e1       	ldi	r22, 0x11	; 17
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	0e 94 a3 03 	call	0x746	; 0x746 <Prog_LMP>
     d06:	9f ef       	ldi	r25, 0xFF	; 255
     d08:	a0 e7       	ldi	r26, 0x70	; 112
     d0a:	b2 e0       	ldi	r27, 0x02	; 2
     d0c:	91 50       	subi	r25, 0x01	; 1
     d0e:	a0 40       	sbci	r26, 0x00	; 0
     d10:	b0 40       	sbci	r27, 0x00	; 0
     d12:	e1 f7       	brne	.-8      	; 0xd0c <__stack+0x40d>
     d14:	00 c0       	rjmp	.+0      	; 0xd16 <__stack+0x417>
     d16:	00 00       	nop
				_delay_ms(100);
				results[resultIdx] = Read_ADC(0,pot);
     d18:	0b 2d       	mov	r16, r11
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0e 94 0f 04 	call	0x81e	; 0x81e <Read_ADC>
     d24:	00 0f       	add	r16, r16
     d26:	11 1f       	adc	r17, r17
     d28:	e1 e0       	ldi	r30, 0x01	; 1
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	ec 0f       	add	r30, r28
     d2e:	fd 1f       	adc	r31, r29
     d30:	e0 0f       	add	r30, r16
     d32:	f1 1f       	adc	r31, r17
     d34:	93 ab       	std	Z+51, r25	; 0x33
     d36:	82 ab       	std	Z+50, r24	; 0x32
				resultIdx ++;
     d38:	b3 94       	inc	r11
				_delay_ms(100);
				results[resultIdx] = Read_ADC(0,pot);
				resultIdx ++;
			}
			
			for(uint8_t i = 11; i > 0; i --)
     d3a:	fa 94       	dec	r15
     d3c:	f1 10       	cpse	r15, r1
     d3e:	dd cf       	rjmp	.-70     	; 0xcfa <__stack+0x3fb>
     d40:	21 c0       	rjmp	.+66     	; 0xd84 <__stack+0x485>
				resultIdx ++;
			}
			for(uint8_t i = 0; i <= 11; i ++)
			{
				
				Prog_LMP(0, 0x11, 0x30 + i); // REF = External, INT_Z = 50%, BIAS_SIGN = Positive, BIAS = i
     d42:	40 e3       	ldi	r20, 0x30	; 48
     d44:	4f 0d       	add	r20, r15
     d46:	61 e1       	ldi	r22, 0x11	; 17
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	0e 94 a3 03 	call	0x746	; 0x746 <Prog_LMP>
     d4e:	ef ef       	ldi	r30, 0xFF	; 255
     d50:	f0 e7       	ldi	r31, 0x70	; 112
     d52:	22 e0       	ldi	r18, 0x02	; 2
     d54:	e1 50       	subi	r30, 0x01	; 1
     d56:	f0 40       	sbci	r31, 0x00	; 0
     d58:	20 40       	sbci	r18, 0x00	; 0
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <__stack+0x455>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <__stack+0x45f>
     d5e:	00 00       	nop
				_delay_ms(100);
				results[resultIdx] = Read_ADC(0,pot);
     d60:	0b 2d       	mov	r16, r11
     d62:	10 e0       	ldi	r17, 0x00	; 0
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 0f 04 	call	0x81e	; 0x81e <Read_ADC>
     d6c:	00 0f       	add	r16, r16
     d6e:	11 1f       	adc	r17, r17
     d70:	e1 e0       	ldi	r30, 0x01	; 1
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	ec 0f       	add	r30, r28
     d76:	fd 1f       	adc	r31, r29
     d78:	e0 0f       	add	r30, r16
     d7a:	f1 1f       	adc	r31, r17
     d7c:	93 ab       	std	Z+51, r25	; 0x33
     d7e:	82 ab       	std	Z+50, r24	; 0x32
				resultIdx ++;
     d80:	b3 94       	inc	r11
				Prog_LMP(0, 0x11, 0x20 + i); // REF = External, INT_Z = 50%, BIAS_SIGN = Negative, BIAS = i
				_delay_ms(100);
				results[resultIdx] = Read_ADC(0,pot);
				resultIdx ++;
			}
			for(uint8_t i = 0; i <= 11; i ++)
     d82:	f3 94       	inc	r15
     d84:	3b e0       	ldi	r19, 0x0B	; 11
     d86:	3f 15       	cp	r19, r15
     d88:	e0 f6       	brcc	.-72     	; 0xd42 <__stack+0x443>
     d8a:	0f 2e       	mov	r0, r31
     d8c:	fb e0       	ldi	r31, 0x0B	; 11
     d8e:	ff 2e       	mov	r15, r31
     d90:	f0 2d       	mov	r31, r0
     d92:	21 c0       	rjmp	.+66     	; 0xdd6 <__stack+0x4d7>
				results[resultIdx] = Read_ADC(0,pot);
				resultIdx ++;
			}
			for(uint8_t i = 11; i > 0; i --)
			{
				Prog_LMP(0, 0x11, 0x30 + i); // REF = External, INT_Z = 50%, BIAS_SIGN = Positive, BIAS = i
     d94:	40 e3       	ldi	r20, 0x30	; 48
     d96:	4f 0d       	add	r20, r15
     d98:	61 e1       	ldi	r22, 0x11	; 17
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	0e 94 a3 03 	call	0x746	; 0x746 <Prog_LMP>
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	90 e7       	ldi	r25, 0x70	; 112
     da4:	a2 e0       	ldi	r26, 0x02	; 2
     da6:	81 50       	subi	r24, 0x01	; 1
     da8:	90 40       	sbci	r25, 0x00	; 0
     daa:	a0 40       	sbci	r26, 0x00	; 0
     dac:	e1 f7       	brne	.-8      	; 0xda6 <__stack+0x4a7>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <__stack+0x4b1>
     db0:	00 00       	nop
				_delay_ms(100);
				results[resultIdx] = Read_ADC(0,pot);
     db2:	0b 2d       	mov	r16, r11
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	0e 94 0f 04 	call	0x81e	; 0x81e <Read_ADC>
     dbe:	00 0f       	add	r16, r16
     dc0:	11 1f       	adc	r17, r17
     dc2:	e1 e0       	ldi	r30, 0x01	; 1
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	ec 0f       	add	r30, r28
     dc8:	fd 1f       	adc	r31, r29
     dca:	e0 0f       	add	r30, r16
     dcc:	f1 1f       	adc	r31, r17
     dce:	93 ab       	std	Z+51, r25	; 0x33
     dd0:	82 ab       	std	Z+50, r24	; 0x32
				resultIdx ++;
     dd2:	b3 94       	inc	r11
				Prog_LMP(0, 0x11, 0x30 + i); // REF = External, INT_Z = 50%, BIAS_SIGN = Positive, BIAS = i
				_delay_ms(100);
				results[resultIdx] = Read_ADC(0,pot);
				resultIdx ++;
			}
			for(uint8_t i = 11; i > 0; i --)
     dd4:	fa 94       	dec	r15
     dd6:	f1 10       	cpse	r15, r1
     dd8:	dd cf       	rjmp	.-70     	; 0xd94 <__stack+0x495>
     dda:	00 e0       	ldi	r16, 0x00	; 0
     ddc:	bd c0       	rjmp	.+378    	; 0xf58 <__stack+0x659>
				resultIdx ++;
			}
			
			for (uint8_t i = 0; i < resultIdx; i++)
			{
				UART_SendString("\n\rRESULT ");
     dde:	8a e2       	ldi	r24, 0x2A	; 42
     de0:	92 e0       	ldi	r25, 0x02	; 2
     de2:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
				UART_TxChar(0x30 + ((i % 1000) / 100) );
     de6:	e0 2e       	mov	r14, r16
     de8:	f1 2c       	mov	r15, r1
     dea:	0f 2e       	mov	r0, r31
     dec:	f8 ee       	ldi	r31, 0xE8	; 232
     dee:	cf 2e       	mov	r12, r31
     df0:	f3 e0       	ldi	r31, 0x03	; 3
     df2:	df 2e       	mov	r13, r31
     df4:	f0 2d       	mov	r31, r0
     df6:	c7 01       	movw	r24, r14
     df8:	b6 01       	movw	r22, r12
     dfa:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__divmodhi4>
     dfe:	64 e6       	ldi	r22, 0x64	; 100
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__divmodhi4>
     e06:	80 e3       	ldi	r24, 0x30	; 48
     e08:	86 0f       	add	r24, r22
     e0a:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
				UART_TxChar(0x30 + ((i % 100) / 10) );
     e0e:	89 e2       	ldi	r24, 0x29	; 41
     e10:	08 9f       	mul	r16, r24
     e12:	81 2d       	mov	r24, r1
     e14:	11 24       	eor	r1, r1
     e16:	82 95       	swap	r24
     e18:	8f 70       	andi	r24, 0x0F	; 15
     e1a:	0f 2e       	mov	r0, r31
     e1c:	f4 e6       	ldi	r31, 0x64	; 100
     e1e:	af 2e       	mov	r10, r31
     e20:	f0 2d       	mov	r31, r0
     e22:	b0 2f       	mov	r27, r16
     e24:	8a 9d       	mul	r24, r10
     e26:	b0 19       	sub	r27, r0
     e28:	11 24       	eor	r1, r1
     e2a:	1d ec       	ldi	r17, 0xCD	; 205
     e2c:	b1 9f       	mul	r27, r17
     e2e:	81 2d       	mov	r24, r1
     e30:	11 24       	eor	r1, r1
     e32:	86 95       	lsr	r24
     e34:	86 95       	lsr	r24
     e36:	86 95       	lsr	r24
     e38:	80 5d       	subi	r24, 0xD0	; 208
     e3a:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
				UART_TxChar(0x30 + (i % 10));
     e3e:	01 9f       	mul	r16, r17
     e40:	11 2d       	mov	r17, r1
     e42:	11 24       	eor	r1, r1
     e44:	16 95       	lsr	r17
     e46:	16 95       	lsr	r17
     e48:	16 95       	lsr	r17
     e4a:	11 0f       	add	r17, r17
     e4c:	81 2f       	mov	r24, r17
     e4e:	88 0f       	add	r24, r24
     e50:	88 0f       	add	r24, r24
     e52:	18 0f       	add	r17, r24
     e54:	80 2f       	mov	r24, r16
     e56:	81 1b       	sub	r24, r17
     e58:	80 5d       	subi	r24, 0xD0	; 208
     e5a:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
				UART_SendString(" : ");
     e5e:	87 e1       	ldi	r24, 0x17	; 23
     e60:	92 e0       	ldi	r25, 0x02	; 2
     e62:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
				UART_TxChar(0x30 + (results[i] / 1000) );
     e66:	ee 0c       	add	r14, r14
     e68:	ff 1c       	adc	r15, r15
     e6a:	e1 e0       	ldi	r30, 0x01	; 1
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	ec 0f       	add	r30, r28
     e70:	fd 1f       	adc	r31, r29
     e72:	ee 0d       	add	r30, r14
     e74:	ff 1d       	adc	r31, r15
     e76:	e2 a8       	ldd	r14, Z+50	; 0x32
     e78:	f3 a8       	ldd	r15, Z+51	; 0x33
     e7a:	37 01       	movw	r6, r14
     e7c:	76 94       	lsr	r7
     e7e:	67 94       	ror	r6
     e80:	76 94       	lsr	r7
     e82:	67 94       	ror	r6
     e84:	76 94       	lsr	r7
     e86:	67 94       	ror	r6
     e88:	93 01       	movw	r18, r6
     e8a:	a5 ec       	ldi	r26, 0xC5	; 197
     e8c:	b0 e2       	ldi	r27, 0x20	; 32
     e8e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__umulhisi3>
     e92:	4c 01       	movw	r8, r24
     e94:	96 94       	lsr	r9
     e96:	87 94       	ror	r8
     e98:	96 94       	lsr	r9
     e9a:	87 94       	ror	r8
     e9c:	96 94       	lsr	r9
     e9e:	87 94       	ror	r8
     ea0:	96 94       	lsr	r9
     ea2:	87 94       	ror	r8
     ea4:	80 e3       	ldi	r24, 0x30	; 48
     ea6:	88 0d       	add	r24, r8
     ea8:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
				UART_TxChar(0x30 + ((results[i] % 1000) / 100) );
     eac:	8c 9c       	mul	r8, r12
     eae:	c0 01       	movw	r24, r0
     eb0:	8d 9c       	mul	r8, r13
     eb2:	90 0d       	add	r25, r0
     eb4:	9c 9c       	mul	r9, r12
     eb6:	90 0d       	add	r25, r0
     eb8:	11 24       	eor	r1, r1
     eba:	97 01       	movw	r18, r14
     ebc:	28 1b       	sub	r18, r24
     ebe:	39 0b       	sbc	r19, r25
     ec0:	36 95       	lsr	r19
     ec2:	27 95       	ror	r18
     ec4:	36 95       	lsr	r19
     ec6:	27 95       	ror	r18
     ec8:	ab e7       	ldi	r26, 0x7B	; 123
     eca:	b4 e1       	ldi	r27, 0x14	; 20
     ecc:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__umulhisi3>
     ed0:	96 95       	lsr	r25
     ed2:	87 95       	ror	r24
     ed4:	80 5d       	subi	r24, 0xD0	; 208
     ed6:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
				UART_TxChar(0x30 + ((results[i] % 100) / 10) );
     eda:	97 01       	movw	r18, r14
     edc:	36 95       	lsr	r19
     ede:	27 95       	ror	r18
     ee0:	36 95       	lsr	r19
     ee2:	27 95       	ror	r18
     ee4:	ab e7       	ldi	r26, 0x7B	; 123
     ee6:	b4 e1       	ldi	r27, 0x14	; 20
     ee8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__umulhisi3>
     eec:	9c 01       	movw	r18, r24
     eee:	36 95       	lsr	r19
     ef0:	27 95       	ror	r18
     ef2:	a2 9e       	mul	r10, r18
     ef4:	c0 01       	movw	r24, r0
     ef6:	a3 9e       	mul	r10, r19
     ef8:	90 0d       	add	r25, r0
     efa:	11 24       	eor	r1, r1
     efc:	97 01       	movw	r18, r14
     efe:	28 1b       	sub	r18, r24
     f00:	39 0b       	sbc	r19, r25
     f02:	ad ec       	ldi	r26, 0xCD	; 205
     f04:	bc ec       	ldi	r27, 0xCC	; 204
     f06:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__umulhisi3>
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	96 95       	lsr	r25
     f10:	87 95       	ror	r24
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	80 5d       	subi	r24, 0xD0	; 208
     f18:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
				UART_TxChar(0x30 + (results[i] % 10));
     f1c:	97 01       	movw	r18, r14
     f1e:	ad ec       	ldi	r26, 0xCD	; 205
     f20:	bc ec       	ldi	r27, 0xCC	; 204
     f22:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__umulhisi3>
     f26:	96 95       	lsr	r25
     f28:	87 95       	ror	r24
     f2a:	96 95       	lsr	r25
     f2c:	87 95       	ror	r24
     f2e:	96 95       	lsr	r25
     f30:	87 95       	ror	r24
     f32:	9c 01       	movw	r18, r24
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	82 0f       	add	r24, r18
     f46:	93 1f       	adc	r25, r19
     f48:	f7 01       	movw	r30, r14
     f4a:	e8 1b       	sub	r30, r24
     f4c:	f9 0b       	sbc	r31, r25
     f4e:	cf 01       	movw	r24, r30
     f50:	80 5d       	subi	r24, 0xD0	; 208
     f52:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_TxChar>
				_delay_ms(100);
				results[resultIdx] = Read_ADC(0,pot);
				resultIdx ++;
			}
			
			for (uint8_t i = 0; i < resultIdx; i++)
     f56:	0f 5f       	subi	r16, 0xFF	; 255
     f58:	0b 15       	cp	r16, r11
     f5a:	08 f4       	brcc	.+2      	; 0xf5e <__stack+0x65f>
     f5c:	40 cf       	rjmp	.-384    	; 0xdde <__stack+0x4df>
     f5e:	2f cd       	rjmp	.-1442   	; 0x9be <__stack+0xbf>
			}
			
			break;
			
			default:
			UART_SendString("\r\nERR: NOT A VALID OPCODE!");
     f60:	84 e3       	ldi	r24, 0x34	; 52
     f62:	92 e0       	ldi	r25, 0x02	; 2
     f64:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_SendString>
			break;
     f68:	2a cd       	rjmp	.-1452   	; 0x9be <__stack+0xbf>

00000f6a <__divmodhi4>:
     f6a:	97 fb       	bst	r25, 7
     f6c:	07 2e       	mov	r0, r23
     f6e:	16 f4       	brtc	.+4      	; 0xf74 <__divmodhi4+0xa>
     f70:	00 94       	com	r0
     f72:	07 d0       	rcall	.+14     	; 0xf82 <__divmodhi4_neg1>
     f74:	77 fd       	sbrc	r23, 7
     f76:	09 d0       	rcall	.+18     	; 0xf8a <__divmodhi4_neg2>
     f78:	0e 94 00 08 	call	0x1000	; 0x1000 <__udivmodhi4>
     f7c:	07 fc       	sbrc	r0, 7
     f7e:	05 d0       	rcall	.+10     	; 0xf8a <__divmodhi4_neg2>
     f80:	3e f4       	brtc	.+14     	; 0xf90 <__divmodhi4_exit>

00000f82 <__divmodhi4_neg1>:
     f82:	90 95       	com	r25
     f84:	81 95       	neg	r24
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	08 95       	ret

00000f8a <__divmodhi4_neg2>:
     f8a:	70 95       	com	r23
     f8c:	61 95       	neg	r22
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255

00000f90 <__divmodhi4_exit>:
     f90:	08 95       	ret

00000f92 <__udivmodsi4>:
     f92:	a1 e2       	ldi	r26, 0x21	; 33
     f94:	1a 2e       	mov	r1, r26
     f96:	aa 1b       	sub	r26, r26
     f98:	bb 1b       	sub	r27, r27
     f9a:	fd 01       	movw	r30, r26
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <__udivmodsi4_ep>

00000f9e <__udivmodsi4_loop>:
     f9e:	aa 1f       	adc	r26, r26
     fa0:	bb 1f       	adc	r27, r27
     fa2:	ee 1f       	adc	r30, r30
     fa4:	ff 1f       	adc	r31, r31
     fa6:	a2 17       	cp	r26, r18
     fa8:	b3 07       	cpc	r27, r19
     faa:	e4 07       	cpc	r30, r20
     fac:	f5 07       	cpc	r31, r21
     fae:	20 f0       	brcs	.+8      	; 0xfb8 <__udivmodsi4_ep>
     fb0:	a2 1b       	sub	r26, r18
     fb2:	b3 0b       	sbc	r27, r19
     fb4:	e4 0b       	sbc	r30, r20
     fb6:	f5 0b       	sbc	r31, r21

00000fb8 <__udivmodsi4_ep>:
     fb8:	66 1f       	adc	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	1a 94       	dec	r1
     fc2:	69 f7       	brne	.-38     	; 0xf9e <__udivmodsi4_loop>
     fc4:	60 95       	com	r22
     fc6:	70 95       	com	r23
     fc8:	80 95       	com	r24
     fca:	90 95       	com	r25
     fcc:	9b 01       	movw	r18, r22
     fce:	ac 01       	movw	r20, r24
     fd0:	bd 01       	movw	r22, r26
     fd2:	cf 01       	movw	r24, r30
     fd4:	08 95       	ret

00000fd6 <__tablejump2__>:
     fd6:	ee 0f       	add	r30, r30
     fd8:	ff 1f       	adc	r31, r31
     fda:	05 90       	lpm	r0, Z+
     fdc:	f4 91       	lpm	r31, Z
     fde:	e0 2d       	mov	r30, r0
     fe0:	09 94       	ijmp

00000fe2 <__umulhisi3>:
     fe2:	a2 9f       	mul	r26, r18
     fe4:	b0 01       	movw	r22, r0
     fe6:	b3 9f       	mul	r27, r19
     fe8:	c0 01       	movw	r24, r0
     fea:	a3 9f       	mul	r26, r19
     fec:	70 0d       	add	r23, r0
     fee:	81 1d       	adc	r24, r1
     ff0:	11 24       	eor	r1, r1
     ff2:	91 1d       	adc	r25, r1
     ff4:	b2 9f       	mul	r27, r18
     ff6:	70 0d       	add	r23, r0
     ff8:	81 1d       	adc	r24, r1
     ffa:	11 24       	eor	r1, r1
     ffc:	91 1d       	adc	r25, r1
     ffe:	08 95       	ret

00001000 <__udivmodhi4>:
    1000:	aa 1b       	sub	r26, r26
    1002:	bb 1b       	sub	r27, r27
    1004:	51 e1       	ldi	r21, 0x11	; 17
    1006:	07 c0       	rjmp	.+14     	; 0x1016 <__udivmodhi4_ep>

00001008 <__udivmodhi4_loop>:
    1008:	aa 1f       	adc	r26, r26
    100a:	bb 1f       	adc	r27, r27
    100c:	a6 17       	cp	r26, r22
    100e:	b7 07       	cpc	r27, r23
    1010:	10 f0       	brcs	.+4      	; 0x1016 <__udivmodhi4_ep>
    1012:	a6 1b       	sub	r26, r22
    1014:	b7 0b       	sbc	r27, r23

00001016 <__udivmodhi4_ep>:
    1016:	88 1f       	adc	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	5a 95       	dec	r21
    101c:	a9 f7       	brne	.-22     	; 0x1008 <__udivmodhi4_loop>
    101e:	80 95       	com	r24
    1020:	90 95       	com	r25
    1022:	bc 01       	movw	r22, r24
    1024:	cd 01       	movw	r24, r26
    1026:	08 95       	ret

00001028 <_exit>:
    1028:	f8 94       	cli

0000102a <__stop_program>:
    102a:	ff cf       	rjmp	.-2      	; 0x102a <__stop_program>
