
Capstone - Atmega328PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000310  00800100  00000c02  00000c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c02  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000f86  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000150  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029cf  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b31  00000000  00000000  00003b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012ec  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000384  00000000  00000000  00005934  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000759  00000000  00000000  00005cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000017af  00000000  00000000  00006411  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  00007bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	14 e0       	ldi	r17, 0x04	; 4
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e0       	ldi	r30, 0x02	; 2
  c8:	fc e0       	ldi	r31, 0x0C	; 12
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 02 04 	call	0x804	; 0x804 <main>
  da:	0c 94 ff 05 	jmp	0xbfe	; 0xbfe <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <UART_init>:
{
	
}

void Set_LMP_REFCN(uint8_t ID, uint8_t val)
{
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  e8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ec:	87 e6       	ldi	r24, 0x67	; 103
  ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  f8:	88 e1       	ldi	r24, 0x18	; 24
  fa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  fe:	08 95       	ret

00000100 <UART_RxChar>:
 100:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 104:	88 23       	and	r24, r24
 106:	e4 f7       	brge	.-8      	; 0x100 <UART_RxChar>
 108:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 10c:	08 95       	ret

0000010e <UART_TxChar>:
 10e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 112:	95 ff       	sbrs	r25, 5
 114:	fc cf       	rjmp	.-8      	; 0x10e <UART_TxChar>
 116:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11a:	08 95       	ret

0000011c <UART_SendString>:
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	8c 01       	movw	r16, r24
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	03 c0       	rjmp	.+6      	; 0x12e <UART_SendString+0x12>
 128:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
 12c:	cf 5f       	subi	r28, 0xFF	; 255
 12e:	f8 01       	movw	r30, r16
 130:	ec 0f       	add	r30, r28
 132:	f1 1d       	adc	r31, r1
 134:	80 81       	ld	r24, Z
 136:	81 11       	cpse	r24, r1
 138:	f7 cf       	rjmp	.-18     	; 0x128 <UART_SendString+0xc>
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <SPI_Init>:
 142:	84 b1       	in	r24, 0x04	; 4
 144:	8c 62       	ori	r24, 0x2C	; 44
 146:	84 b9       	out	0x04, r24	; 4
 148:	83 e5       	ldi	r24, 0x53	; 83
 14a:	8c bd       	out	0x2c, r24	; 44
 14c:	1d bc       	out	0x2d, r1	; 45
 14e:	08 95       	ret

00000150 <SPI_Write>:
 150:	8e bd       	out	0x2e, r24	; 46
 152:	0d b4       	in	r0, 0x2d	; 45
 154:	07 fe       	sbrs	r0, 7
 156:	fd cf       	rjmp	.-6      	; 0x152 <SPI_Write+0x2>
 158:	08 95       	ret

0000015a <SPI_Transceiver>:
 15a:	8e bd       	out	0x2e, r24	; 46
 15c:	0d b4       	in	r0, 0x2d	; 45
 15e:	07 fe       	sbrs	r0, 7
 160:	fd cf       	rjmp	.-6      	; 0x15c <SPI_Transceiver+0x2>
 162:	8e b5       	in	r24, 0x2e	; 46
 164:	08 95       	ret

00000166 <TWI_init_master>:
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 16c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 170:	08 95       	ret

00000172 <TWI_start>:
 172:	84 ea       	ldi	r24, 0xA4	; 164
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	88 23       	and	r24, r24
 17e:	e4 f7       	brge	.-8      	; 0x178 <TWI_start+0x6>
 180:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 184:	88 7f       	andi	r24, 0xF8	; 248
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	d9 f7       	brne	.-10     	; 0x180 <TWI_start+0xe>
 18a:	08 95       	ret

0000018c <TWI_read_address>:
 18c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 190:	84 e8       	ldi	r24, 0x84	; 132
 192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 196:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 19a:	88 23       	and	r24, r24
 19c:	e4 f7       	brge	.-8      	; 0x196 <TWI_read_address+0xa>
 19e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1a2:	88 7f       	andi	r24, 0xF8	; 248
 1a4:	80 34       	cpi	r24, 0x40	; 64
 1a6:	d9 f7       	brne	.-10     	; 0x19e <TWI_read_address+0x12>
 1a8:	08 95       	ret

000001aa <TWI_read_data>:
 1aa:	fc 01       	movw	r30, r24
 1ac:	84 e8       	ldi	r24, 0x84	; 132
 1ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b6:	99 23       	and	r25, r25
 1b8:	e4 f7       	brge	.-8      	; 0x1b2 <TWI_read_data+0x8>
 1ba:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1be:	98 7f       	andi	r25, 0xF8	; 248
 1c0:	98 35       	cpi	r25, 0x58	; 88
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <TWI_read_data+0x10>
 1c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1c8:	80 83       	st	Z, r24
 1ca:	08 95       	ret

000001cc <TWI_write_address>:
 1cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1d0:	84 e8       	ldi	r24, 0x84	; 132
 1d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1da:	88 23       	and	r24, r24
 1dc:	e4 f7       	brge	.-8      	; 0x1d6 <TWI_write_address+0xa>
 1de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1e2:	88 7f       	andi	r24, 0xF8	; 248
 1e4:	88 31       	cpi	r24, 0x18	; 24
 1e6:	d9 f7       	brne	.-10     	; 0x1de <TWI_write_address+0x12>
 1e8:	08 95       	ret

000001ea <TWI_write_data>:
 1ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1ee:	84 e8       	ldi	r24, 0x84	; 132
 1f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f8:	88 23       	and	r24, r24
 1fa:	e4 f7       	brge	.-8      	; 0x1f4 <TWI_write_data+0xa>
 1fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 200:	88 7f       	andi	r24, 0xF8	; 248
 202:	88 32       	cpi	r24, 0x28	; 40
 204:	d9 f7       	brne	.-10     	; 0x1fc <TWI_write_data+0x12>
 206:	08 95       	ret

00000208 <TWI_stop>:
 208:	84 e9       	ldi	r24, 0x94	; 148
 20a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 20e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 212:	84 ff       	sbrs	r24, 4
 214:	fc cf       	rjmp	.-8      	; 0x20e <TWI_stop+0x6>
 216:	08 95       	ret

00000218 <lookup_cs_values>:
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	18 c0       	rjmp	.+48     	; 0x24c <lookup_cs_values+0x34>
 21c:	29 2f       	mov	r18, r25
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	e4 51       	subi	r30, 0x14	; 20
 228:	fc 4f       	sbci	r31, 0xFC	; 252
 22a:	40 81       	ld	r20, Z
 22c:	84 17       	cp	r24, r20
 22e:	68 f0       	brcs	.+26     	; 0x24a <lookup_cs_values+0x32>
 230:	f9 01       	movw	r30, r18
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	e4 51       	subi	r30, 0x14	; 20
 238:	fc 4f       	sbci	r31, 0xFC	; 252
 23a:	41 81       	ldd	r20, Z+1	; 0x01
 23c:	48 17       	cp	r20, r24
 23e:	28 f0       	brcs	.+10     	; 0x24a <lookup_cs_values+0x32>
 240:	f9 01       	movw	r30, r18
 242:	e6 52       	subi	r30, 0x26	; 38
 244:	fc 4f       	sbci	r31, 0xFC	; 252
 246:	80 81       	ld	r24, Z
 248:	08 95       	ret
 24a:	9f 5f       	subi	r25, 0xFF	; 255
 24c:	92 31       	cpi	r25, 0x12	; 18
 24e:	30 f3       	brcs	.-52     	; 0x21c <lookup_cs_values+0x4>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret

00000254 <lookup_hex_values>:
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	12 c0       	rjmp	.+36     	; 0x27c <lookup_hex_values+0x28>
 258:	29 2f       	mov	r18, r25
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	f9 01       	movw	r30, r18
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	ec 5b       	subi	r30, 0xBC	; 188
 264:	fc 4f       	sbci	r31, 0xFC	; 252
 266:	40 81       	ld	r20, Z
 268:	48 13       	cpse	r20, r24
 26a:	07 c0       	rjmp	.+14     	; 0x27a <lookup_hex_values+0x26>
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	f9 01       	movw	r30, r18
 272:	ec 5b       	subi	r30, 0xBC	; 188
 274:	fc 4f       	sbci	r31, 0xFC	; 252
 276:	81 81       	ldd	r24, Z+1	; 0x01
 278:	08 95       	ret
 27a:	9f 5f       	subi	r25, 0xFF	; 255
 27c:	9b 34       	cpi	r25, 0x4B	; 75
 27e:	60 f3       	brcs	.-40     	; 0x258 <lookup_hex_values+0x4>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 95       	ret

00000284 <Init_IOX>:
 284:	cf 93       	push	r28
 286:	c0 e0       	ldi	r28, 0x00	; 0
 288:	15 c0       	rjmp	.+42     	; 0x2b4 <Init_IOX+0x30>
 28a:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 28e:	82 e4       	ldi	r24, 0x42	; 66
 290:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
 294:	88 e1       	ldi	r24, 0x18	; 24
 296:	8c 0f       	add	r24, r28
 298:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 2a2:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 2a6:	8f ec       	ldi	r24, 0xCF	; 207
 2a8:	97 e0       	ldi	r25, 0x07	; 7
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <Init_IOX+0x26>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <Init_IOX+0x2c>
 2b0:	00 00       	nop
 2b2:	cf 5f       	subi	r28, 0xFF	; 255
 2b4:	c5 30       	cpi	r28, 0x05	; 5
 2b6:	48 f3       	brcs	.-46     	; 0x28a <Init_IOX+0x6>
 2b8:	c0 e0       	ldi	r28, 0x00	; 0
 2ba:	15 c0       	rjmp	.+42     	; 0x2e6 <Init_IOX+0x62>
 2bc:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 2c0:	82 e4       	ldi	r24, 0x42	; 66
 2c2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
 2c6:	88 e0       	ldi	r24, 0x08	; 8
 2c8:	8c 0f       	add	r24, r28
 2ca:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 2d4:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 2d8:	8f ec       	ldi	r24, 0xCF	; 207
 2da:	97 e0       	ldi	r25, 0x07	; 7
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <Init_IOX+0x58>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <Init_IOX+0x5e>
 2e2:	00 00       	nop
 2e4:	cf 5f       	subi	r28, 0xFF	; 255
 2e6:	c5 30       	cpi	r28, 0x05	; 5
 2e8:	48 f3       	brcs	.-46     	; 0x2bc <Init_IOX+0x38>
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	15 c0       	rjmp	.+42     	; 0x318 <Init_IOX+0x94>
 2ee:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 2f2:	80 e4       	ldi	r24, 0x40	; 64
 2f4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
 2f8:	88 e1       	ldi	r24, 0x18	; 24
 2fa:	8c 0f       	add	r24, r28
 2fc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 306:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 30a:	8f ec       	ldi	r24, 0xCF	; 207
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <Init_IOX+0x8a>
 312:	00 c0       	rjmp	.+0      	; 0x314 <Init_IOX+0x90>
 314:	00 00       	nop
 316:	cf 5f       	subi	r28, 0xFF	; 255
 318:	c5 30       	cpi	r28, 0x05	; 5
 31a:	48 f3       	brcs	.-46     	; 0x2ee <Init_IOX+0x6a>
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	15 c0       	rjmp	.+42     	; 0x34a <Init_IOX+0xc6>
 320:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 324:	80 e4       	ldi	r24, 0x40	; 64
 326:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
 32a:	88 e0       	ldi	r24, 0x08	; 8
 32c:	8c 0f       	add	r24, r28
 32e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 338:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 33c:	8f ec       	ldi	r24, 0xCF	; 207
 33e:	97 e0       	ldi	r25, 0x07	; 7
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <Init_IOX+0xbc>
 344:	00 c0       	rjmp	.+0      	; 0x346 <Init_IOX+0xc2>
 346:	00 00       	nop
 348:	cf 5f       	subi	r28, 0xFF	; 255
 34a:	c5 30       	cpi	r28, 0x05	; 5
 34c:	48 f3       	brcs	.-46     	; 0x320 <Init_IOX+0x9c>
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <CS_low>:
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	c8 2f       	mov	r28, r24
 35a:	0e 94 0c 01 	call	0x218	; 0x218 <lookup_cs_values>
 35e:	18 2f       	mov	r17, r24
 360:	8c 2f       	mov	r24, r28
 362:	0e 94 2a 01 	call	0x254	; 0x254 <lookup_hex_values>
 366:	d8 2f       	mov	r29, r24
 368:	24 ee       	ldi	r18, 0xE4	; 228
 36a:	2c 0f       	add	r18, r28
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	c9 31       	cpi	r28, 0x19	; 25
 370:	08 f0       	brcs	.+2      	; 0x374 <CS_low+0x22>
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	2a 30       	cpi	r18, 0x0A	; 10
 378:	08 f0       	brcs	.+2      	; 0x37c <CS_low+0x2a>
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	89 2b       	or	r24, r25
 37e:	79 f0       	breq	.+30     	; 0x39e <CS_low+0x4c>
 380:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 384:	82 e4       	ldi	r24, 0x42	; 66
 386:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
 38a:	88 e0       	ldi	r24, 0x08	; 8
 38c:	81 0f       	add	r24, r17
 38e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 392:	8d 2f       	mov	r24, r29
 394:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 398:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 39c:	0e c0       	rjmp	.+28     	; 0x3ba <CS_low+0x68>
 39e:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 3a2:	80 e4       	ldi	r24, 0x40	; 64
 3a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	81 0f       	add	r24, r17
 3ac:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 3b0:	8d 2f       	mov	r24, r29
 3b2:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 3b6:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	1f 91       	pop	r17
 3c0:	08 95       	ret

000003c2 <CS_high>:
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	c8 2f       	mov	r28, r24
 3c8:	0e 94 0c 01 	call	0x218	; 0x218 <lookup_cs_values>
 3cc:	d8 2f       	mov	r29, r24
 3ce:	24 ee       	ldi	r18, 0xE4	; 228
 3d0:	2c 0f       	add	r18, r28
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	c9 31       	cpi	r28, 0x19	; 25
 3d6:	08 f0       	brcs	.+2      	; 0x3da <CS_high+0x18>
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	2a 30       	cpi	r18, 0x0A	; 10
 3de:	08 f0       	brcs	.+2      	; 0x3e2 <CS_high+0x20>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	89 2b       	or	r24, r25
 3e4:	79 f0       	breq	.+30     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e6:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 3ea:	82 e4       	ldi	r24, 0x42	; 66
 3ec:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
 3f0:	88 e0       	ldi	r24, 0x08	; 8
 3f2:	8d 0f       	add	r24, r29
 3f4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 3fe:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 402:	0e c0       	rjmp	.+28     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 404:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 408:	80 e4       	ldi	r24, 0x40	; 64
 40a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
 40e:	88 e0       	ldi	r24, 0x08	; 8
 410:	8d 0f       	add	r24, r29
 412:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 41c:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <LED_all_off>:
 426:	cf 93       	push	r28
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	06 c0       	rjmp	.+12     	; 0x43a <LED_all_off+0x14>
 42e:	fc 01       	movw	r30, r24
 430:	e2 0f       	add	r30, r18
 432:	f3 1f       	adc	r31, r19
 434:	10 82       	st	Z, r1
 436:	2f 5f       	subi	r18, 0xFF	; 255
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	22 33       	cpi	r18, 0x32	; 50
 43c:	31 05       	cpc	r19, r1
 43e:	bc f3       	brlt	.-18     	; 0x42e <LED_all_off+0x8>
 440:	c0 e0       	ldi	r28, 0x00	; 0
 442:	13 c0       	rjmp	.+38     	; 0x46a <LED_all_off+0x44>
 444:	8c 2f       	mov	r24, r28
 446:	0e 94 a9 01 	call	0x352	; 0x352 <CS_low>
 44a:	80 e4       	ldi	r24, 0x40	; 64
 44c:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_Write>
 450:	88 e8       	ldi	r24, 0x88	; 136
 452:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_Write>
 456:	8c 2f       	mov	r24, r28
 458:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <CS_high>
 45c:	8f ec       	ldi	r24, 0xCF	; 207
 45e:	97 e0       	ldi	r25, 0x07	; 7
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <LED_all_off+0x3a>
 464:	00 c0       	rjmp	.+0      	; 0x466 <LED_all_off+0x40>
 466:	00 00       	nop
 468:	cf 5f       	subi	r28, 0xFF	; 255
 46a:	cb 34       	cpi	r28, 0x4B	; 75
 46c:	58 f3       	brcs	.-42     	; 0x444 <LED_all_off+0x1e>
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <ToggleLED>:
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	8c 01       	movw	r16, r24
 47c:	c6 2f       	mov	r28, r22
 47e:	d6 2f       	mov	r29, r22
 480:	d6 95       	lsr	r29
 482:	62 33       	cpi	r22, 0x32	; 50
 484:	28 f0       	brcs	.+10     	; 0x490 <ToggleLED+0x1e>
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
 48e:	b7 c0       	rjmp	.+366    	; 0x5fe <ToggleLED+0x18c>
 490:	47 34       	cpi	r20, 0x47	; 71
 492:	09 f4       	brne	.+2      	; 0x496 <ToggleLED+0x24>
 494:	3d c0       	rjmp	.+122    	; 0x510 <ToggleLED+0x9e>
 496:	42 35       	cpi	r20, 0x52	; 82
 498:	41 f0       	breq	.+16     	; 0x4aa <ToggleLED+0x38>
 49a:	42 34       	cpi	r20, 0x42	; 66
 49c:	09 f4       	brne	.+2      	; 0x4a0 <ToggleLED+0x2e>
 49e:	6c c0       	rjmp	.+216    	; 0x578 <ToggleLED+0x106>
 4a0:	8b e1       	ldi	r24, 0x1B	; 27
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
 4a8:	aa c0       	rjmp	.+340    	; 0x5fe <ToggleLED+0x18c>
 4aa:	8a e3       	ldi	r24, 0x3A	; 58
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
 4b2:	2c 2f       	mov	r18, r28
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	f8 01       	movw	r30, r16
 4b8:	e2 0f       	add	r30, r18
 4ba:	f3 1f       	adc	r31, r19
 4bc:	90 81       	ld	r25, Z
 4be:	89 2f       	mov	r24, r25
 4c0:	80 95       	com	r24
 4c2:	84 70       	andi	r24, 0x04	; 4
 4c4:	93 70       	andi	r25, 0x03	; 3
 4c6:	89 2b       	or	r24, r25
 4c8:	80 83       	st	Z, r24
 4ca:	c0 ff       	sbrs	r28, 0
 4cc:	11 c0       	rjmp	.+34     	; 0x4f0 <ToggleLED+0x7e>
 4ce:	84 70       	andi	r24, 0x04	; 4
 4d0:	11 f0       	breq	.+4      	; 0x4d6 <ToggleLED+0x64>
 4d2:	c0 ef       	ldi	r28, 0xF0	; 240
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <ToggleLED+0x66>
 4d6:	c0 e0       	ldi	r28, 0x00	; 0
 4d8:	02 0f       	add	r16, r18
 4da:	13 1f       	adc	r17, r19
 4dc:	f8 01       	movw	r30, r16
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	80 81       	ld	r24, Z
 4e2:	82 ff       	sbrs	r24, 2
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <ToggleLED+0x78>
 4e6:	8f e0       	ldi	r24, 0x0F	; 15
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <ToggleLED+0x7a>
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	c8 2b       	or	r28, r24
 4ee:	77 c0       	rjmp	.+238    	; 0x5de <ToggleLED+0x16c>
 4f0:	f8 01       	movw	r30, r16
 4f2:	e2 0f       	add	r30, r18
 4f4:	f3 1f       	adc	r31, r19
 4f6:	91 81       	ldd	r25, Z+1	; 0x01
 4f8:	92 ff       	sbrs	r25, 2
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <ToggleLED+0x8e>
 4fc:	c0 ef       	ldi	r28, 0xF0	; 240
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <ToggleLED+0x90>
 500:	c0 e0       	ldi	r28, 0x00	; 0
 502:	84 70       	andi	r24, 0x04	; 4
 504:	11 f0       	breq	.+4      	; 0x50a <ToggleLED+0x98>
 506:	8f e0       	ldi	r24, 0x0F	; 15
 508:	01 c0       	rjmp	.+2      	; 0x50c <ToggleLED+0x9a>
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	c8 2b       	or	r28, r24
 50e:	67 c0       	rjmp	.+206    	; 0x5de <ToggleLED+0x16c>
 510:	80 e4       	ldi	r24, 0x40	; 64
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
 518:	d7 5e       	subi	r29, 0xE7	; 231
 51a:	2c 2f       	mov	r18, r28
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	f8 01       	movw	r30, r16
 520:	e2 0f       	add	r30, r18
 522:	f3 1f       	adc	r31, r19
 524:	90 81       	ld	r25, Z
 526:	89 2f       	mov	r24, r25
 528:	80 95       	com	r24
 52a:	82 70       	andi	r24, 0x02	; 2
 52c:	95 70       	andi	r25, 0x05	; 5
 52e:	89 2b       	or	r24, r25
 530:	80 83       	st	Z, r24
 532:	c0 ff       	sbrs	r28, 0
 534:	11 c0       	rjmp	.+34     	; 0x558 <ToggleLED+0xe6>
 536:	81 ff       	sbrs	r24, 1
 538:	02 c0       	rjmp	.+4      	; 0x53e <ToggleLED+0xcc>
 53a:	c0 ef       	ldi	r28, 0xF0	; 240
 53c:	01 c0       	rjmp	.+2      	; 0x540 <ToggleLED+0xce>
 53e:	c0 e0       	ldi	r28, 0x00	; 0
 540:	02 0f       	add	r16, r18
 542:	13 1f       	adc	r17, r19
 544:	f8 01       	movw	r30, r16
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	80 81       	ld	r24, Z
 54a:	81 ff       	sbrs	r24, 1
 54c:	02 c0       	rjmp	.+4      	; 0x552 <ToggleLED+0xe0>
 54e:	8f e0       	ldi	r24, 0x0F	; 15
 550:	01 c0       	rjmp	.+2      	; 0x554 <ToggleLED+0xe2>
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	c8 2b       	or	r28, r24
 556:	43 c0       	rjmp	.+134    	; 0x5de <ToggleLED+0x16c>
 558:	f8 01       	movw	r30, r16
 55a:	e2 0f       	add	r30, r18
 55c:	f3 1f       	adc	r31, r19
 55e:	91 81       	ldd	r25, Z+1	; 0x01
 560:	91 ff       	sbrs	r25, 1
 562:	02 c0       	rjmp	.+4      	; 0x568 <ToggleLED+0xf6>
 564:	c0 ef       	ldi	r28, 0xF0	; 240
 566:	01 c0       	rjmp	.+2      	; 0x56a <ToggleLED+0xf8>
 568:	c0 e0       	ldi	r28, 0x00	; 0
 56a:	81 ff       	sbrs	r24, 1
 56c:	02 c0       	rjmp	.+4      	; 0x572 <ToggleLED+0x100>
 56e:	8f e0       	ldi	r24, 0x0F	; 15
 570:	01 c0       	rjmp	.+2      	; 0x574 <ToggleLED+0x102>
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	c8 2b       	or	r28, r24
 576:	33 c0       	rjmp	.+102    	; 0x5de <ToggleLED+0x16c>
 578:	88 e4       	ldi	r24, 0x48	; 72
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
 580:	de 5c       	subi	r29, 0xCE	; 206
 582:	2c 2f       	mov	r18, r28
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	f8 01       	movw	r30, r16
 588:	e2 0f       	add	r30, r18
 58a:	f3 1f       	adc	r31, r19
 58c:	80 81       	ld	r24, Z
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	98 27       	eor	r25, r24
 592:	91 70       	andi	r25, 0x01	; 1
 594:	86 70       	andi	r24, 0x06	; 6
 596:	89 2b       	or	r24, r25
 598:	80 83       	st	Z, r24
 59a:	c0 ff       	sbrs	r28, 0
 59c:	11 c0       	rjmp	.+34     	; 0x5c0 <ToggleLED+0x14e>
 59e:	80 ff       	sbrs	r24, 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <ToggleLED+0x134>
 5a2:	c0 ef       	ldi	r28, 0xF0	; 240
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <ToggleLED+0x136>
 5a6:	c0 e0       	ldi	r28, 0x00	; 0
 5a8:	02 0f       	add	r16, r18
 5aa:	13 1f       	adc	r17, r19
 5ac:	f8 01       	movw	r30, r16
 5ae:	31 97       	sbiw	r30, 0x01	; 1
 5b0:	80 81       	ld	r24, Z
 5b2:	80 ff       	sbrs	r24, 0
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <ToggleLED+0x148>
 5b6:	8f e0       	ldi	r24, 0x0F	; 15
 5b8:	01 c0       	rjmp	.+2      	; 0x5bc <ToggleLED+0x14a>
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	c8 2b       	or	r28, r24
 5be:	0f c0       	rjmp	.+30     	; 0x5de <ToggleLED+0x16c>
 5c0:	f8 01       	movw	r30, r16
 5c2:	e2 0f       	add	r30, r18
 5c4:	f3 1f       	adc	r31, r19
 5c6:	91 81       	ldd	r25, Z+1	; 0x01
 5c8:	90 ff       	sbrs	r25, 0
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <ToggleLED+0x15e>
 5cc:	c0 ef       	ldi	r28, 0xF0	; 240
 5ce:	01 c0       	rjmp	.+2      	; 0x5d2 <ToggleLED+0x160>
 5d0:	c0 e0       	ldi	r28, 0x00	; 0
 5d2:	80 ff       	sbrs	r24, 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <ToggleLED+0x168>
 5d6:	8f e0       	ldi	r24, 0x0F	; 15
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <ToggleLED+0x16a>
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	c8 2b       	or	r28, r24
 5de:	8d 2f       	mov	r24, r29
 5e0:	0e 94 a9 01 	call	0x352	; 0x352 <CS_low>
 5e4:	80 e4       	ldi	r24, 0x40	; 64
 5e6:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_Write>
 5ea:	8c 2f       	mov	r24, r28
 5ec:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_Write>
 5f0:	8d 2f       	mov	r24, r29
 5f2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <CS_high>
 5f6:	8f e4       	ldi	r24, 0x4F	; 79
 5f8:	91 e0       	ldi	r25, 0x01	; 1
 5fa:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	1f 91       	pop	r17
 604:	0f 91       	pop	r16
 606:	08 95       	ret

00000608 <SetLEDBrightness>:
 608:	1f 93       	push	r17
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	d8 2f       	mov	r29, r24
 610:	14 2f       	mov	r17, r20
 612:	c8 2f       	mov	r28, r24
 614:	c6 95       	lsr	r28
 616:	67 34       	cpi	r22, 0x47	; 71
 618:	71 f0       	breq	.+28     	; 0x636 <SetLEDBrightness+0x2e>
 61a:	62 35       	cpi	r22, 0x52	; 82
 61c:	39 f0       	breq	.+14     	; 0x62c <SetLEDBrightness+0x24>
 61e:	62 34       	cpi	r22, 0x42	; 66
 620:	81 f0       	breq	.+32     	; 0x642 <SetLEDBrightness+0x3a>
 622:	8b e1       	ldi	r24, 0x1B	; 27
 624:	91 e0       	ldi	r25, 0x01	; 1
 626:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
 62a:	21 c0       	rjmp	.+66     	; 0x66e <SetLEDBrightness+0x66>
 62c:	8a e3       	ldi	r24, 0x3A	; 58
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
 634:	0b c0       	rjmp	.+22     	; 0x64c <SetLEDBrightness+0x44>
 636:	80 e4       	ldi	r24, 0x40	; 64
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
 63e:	c7 5e       	subi	r28, 0xE7	; 231
 640:	05 c0       	rjmp	.+10     	; 0x64c <SetLEDBrightness+0x44>
 642:	88 e4       	ldi	r24, 0x48	; 72
 644:	91 e0       	ldi	r25, 0x01	; 1
 646:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
 64a:	ce 5c       	subi	r28, 0xCE	; 206
 64c:	d0 ff       	sbrs	r29, 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <SetLEDBrightness+0x4c>
 650:	d0 e1       	ldi	r29, 0x10	; 16
 652:	01 c0       	rjmp	.+2      	; 0x656 <SetLEDBrightness+0x4e>
 654:	d0 e0       	ldi	r29, 0x00	; 0
 656:	8c 2f       	mov	r24, r28
 658:	0e 94 a9 01 	call	0x352	; 0x352 <CS_low>
 65c:	8d 2f       	mov	r24, r29
 65e:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_Write>
 662:	81 2f       	mov	r24, r17
 664:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_Write>
 668:	8c 2f       	mov	r24, r28
 66a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <CS_high>
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	08 95       	ret

00000676 <Read_LMP_Status>:
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	18 2f       	mov	r17, r24
 67e:	eb 01       	movw	r28, r22
 680:	0e 94 a9 01 	call	0x352	; 0x352 <CS_low>
 684:	8f ec       	ldi	r24, 0xCF	; 207
 686:	97 e0       	ldi	r25, 0x07	; 7
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <Read_LMP_Status+0x12>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <Read_LMP_Status+0x18>
 68e:	00 00       	nop
 690:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 694:	80 e9       	ldi	r24, 0x90	; 144
 696:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 6a0:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 6a4:	8f ec       	ldi	r24, 0xCF	; 207
 6a6:	97 e0       	ldi	r25, 0x07	; 7
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <Read_LMP_Status+0x32>
 6ac:	00 c0       	rjmp	.+0      	; 0x6ae <Read_LMP_Status+0x38>
 6ae:	00 00       	nop
 6b0:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 6b4:	81 e9       	ldi	r24, 0x91	; 145
 6b6:	0e 94 c6 00 	call	0x18c	; 0x18c <TWI_read_address>
 6ba:	ce 01       	movw	r24, r28
 6bc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <TWI_read_data>
 6c0:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 6c4:	8f ec       	ldi	r24, 0xCF	; 207
 6c6:	97 e0       	ldi	r25, 0x07	; 7
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <Read_LMP_Status+0x52>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <Read_LMP_Status+0x58>
 6ce:	00 00       	nop
 6d0:	88 81       	ld	r24, Y
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	69 f7       	brne	.-38     	; 0x6b0 <Read_LMP_Status+0x3a>
 6d6:	81 2f       	mov	r24, r17
 6d8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <CS_high>
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	1f 91       	pop	r17
 6e2:	08 95       	ret

000006e4 <Set_LMP_Unlock>:
 6e4:	cf 93       	push	r28
 6e6:	c8 2f       	mov	r28, r24
 6e8:	0e 94 a9 01 	call	0x352	; 0x352 <CS_low>
 6ec:	8f ec       	ldi	r24, 0xCF	; 207
 6ee:	97 e0       	ldi	r25, 0x07	; 7
 6f0:	01 97       	sbiw	r24, 0x01	; 1
 6f2:	f1 f7       	brne	.-4      	; 0x6f0 <Set_LMP_Unlock+0xc>
 6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <Set_LMP_Unlock+0x12>
 6f6:	00 00       	nop
 6f8:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
 6fc:	80 e9       	ldi	r24, 0x90	; 144
 6fe:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
 70e:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 712:	8f ec       	ldi	r24, 0xCF	; 207
 714:	97 e0       	ldi	r25, 0x07	; 7
 716:	01 97       	sbiw	r24, 0x01	; 1
 718:	f1 f7       	brne	.-4      	; 0x716 <Set_LMP_Unlock+0x32>
 71a:	00 c0       	rjmp	.+0      	; 0x71c <Set_LMP_Unlock+0x38>
 71c:	00 00       	nop
 71e:	8c 2f       	mov	r24, r28
 720:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <CS_high>
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <Set_LMP_Temperature>:
	
}

void Set_LMP_Temperature(uint8_t ID)
{
 728:	cf 93       	push	r28
 72a:	c8 2f       	mov	r28, r24
	CS_low(ID);
 72c:	0e 94 a9 01 	call	0x352	; 0x352 <CS_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 730:	8f ec       	ldi	r24, 0xCF	; 207
 732:	97 e0       	ldi	r25, 0x07	; 7
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	f1 f7       	brne	.-4      	; 0x734 <Set_LMP_Temperature+0xc>
 738:	00 c0       	rjmp	.+0      	; 0x73a <Set_LMP_Temperature+0x12>
 73a:	00 00       	nop
	_delay_ms(1);

	TWI_start();
 73c:	0e 94 b9 00 	call	0x172	; 0x172 <TWI_start>
	TWI_write_address(LMP_WRITE_ADDR);
 740:	80 e9       	ldi	r24, 0x90	; 144
 742:	0e 94 e6 00 	call	0x1cc	; 0x1cc <TWI_write_address>
	TWI_write_data(0x12);
 746:	82 e1       	ldi	r24, 0x12	; 18
 748:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
	TWI_write_data(0x06);
 74c:	86 e0       	ldi	r24, 0x06	; 6
 74e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <TWI_write_data>
	TWI_stop();
 752:	0e 94 04 01 	call	0x208	; 0x208 <TWI_stop>
 756:	8f ec       	ldi	r24, 0xCF	; 207
 758:	97 e0       	ldi	r25, 0x07	; 7
 75a:	01 97       	sbiw	r24, 0x01	; 1
 75c:	f1 f7       	brne	.-4      	; 0x75a <Set_LMP_Temperature+0x32>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <Set_LMP_Temperature+0x38>
 760:	00 00       	nop
	_delay_ms(1);
	
	CS_high(ID);
 762:	8c 2f       	mov	r24, r28
 764:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <CS_high>
}
 768:	cf 91       	pop	r28
 76a:	08 95       	ret

0000076c <Read_ADC>:

uint16_t Read_ADC(uint8_t adc, uint8_t channel)
{
 76c:	cf 93       	push	r28
	uint8_t analogL;
	uint8_t opcode; 
	uint16_t temp = 0;
	
	opcode = 0x01;
	PORTD = !(1 << (2 + adc));
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	02 96       	adiw	r24, 0x02	; 2
 772:	21 e0       	ldi	r18, 0x01	; 1
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	a9 01       	movw	r20, r18
 778:	02 c0       	rjmp	.+4      	; 0x77e <Read_ADC+0x12>
 77a:	44 0f       	add	r20, r20
 77c:	55 1f       	adc	r21, r21
 77e:	8a 95       	dec	r24
 780:	e2 f7       	brpl	.-8      	; 0x77a <Read_ADC+0xe>
 782:	ca 01       	movw	r24, r20
 784:	89 2b       	or	r24, r25
 786:	09 f0       	breq	.+2      	; 0x78a <Read_ADC+0x1e>
 788:	20 e0       	ldi	r18, 0x00	; 0
 78a:	2b b9       	out	0x0b, r18	; 11
	
	SPI_Write(opcode);
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_Write>
	//opcode |= (channel << 4);
	opcode = 0b10000000;
	analogH = SPI_Transceiver(opcode);
 792:	80 e8       	ldi	r24, 0x80	; 128
 794:	0e 94 ad 00 	call	0x15a	; 0x15a <SPI_Transceiver>
	analogH = (analogH & 0b00000011);
 798:	c8 2f       	mov	r28, r24
 79a:	c3 70       	andi	r28, 0x03	; 3
	analogL = SPI_Transceiver(0);
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	0e 94 ad 00 	call	0x15a	; 0x15a <SPI_Transceiver>
	PORTD = 0xFF;
 7a2:	9f ef       	ldi	r25, 0xFF	; 255
 7a4:	9b b9       	out	0x0b, r25	; 11
	
	temp = (analogH << 8) + analogL;
 7a6:	2c 2f       	mov	r18, r28
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	32 2f       	mov	r19, r18
 7ac:	22 27       	eor	r18, r18
	
	return temp;
 7ae:	a9 01       	movw	r20, r18
 7b0:	48 0f       	add	r20, r24
 7b2:	51 1d       	adc	r21, r1
 7b4:	ca 01       	movw	r24, r20
 7b6:	cf 91       	pop	r28
 7b8:	08 95       	ret

000007ba <DAC_Program>:
#define I2C_RST PINC0

#define DAC_STEP 0x10

void DAC_Program(uint8_t hi, uint8_t lo)
{
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	d6 2f       	mov	r29, r22
	PORTB ^= (1 << DAC_SEL);
 7c0:	95 b1       	in	r25, 0x05	; 5
 7c2:	c1 e0       	ldi	r28, 0x01	; 1
 7c4:	9c 27       	eor	r25, r28
 7c6:	95 b9       	out	0x05, r25	; 5
	SPI_Write(hi);
 7c8:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_Write>
	SPI_Write(lo);
 7cc:	8d 2f       	mov	r24, r29
 7ce:	0e 94 a8 00 	call	0x150	; 0x150 <SPI_Write>
	PORTB ^= (1 << DAC_SEL);
 7d2:	85 b1       	in	r24, 0x05	; 5
 7d4:	c8 27       	eor	r28, r24
 7d6:	c5 b9       	out	0x05, r28	; 5
}
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <ascii_dec>:

uint8_t ascii_dec(char ascii[], uint8_t count){
 7de:	ac 01       	movw	r20, r24
	uint8_t val = 0;
	for (uint8_t i = 0; i < count; i ++){
 7e0:	20 e0       	ldi	r18, 0x00	; 0
	SPI_Write(lo);
	PORTB ^= (1 << DAC_SEL);
}

uint8_t ascii_dec(char ascii[], uint8_t count){
	uint8_t val = 0;
 7e2:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < count; i ++){
 7e4:	0c c0       	rjmp	.+24     	; 0x7fe <ascii_dec+0x20>
		val = val * 10;
 7e6:	88 0f       	add	r24, r24
 7e8:	98 2f       	mov	r25, r24
 7ea:	99 0f       	add	r25, r25
 7ec:	99 0f       	add	r25, r25
 7ee:	89 0f       	add	r24, r25
		val += ascii[i] - 0x30;
 7f0:	fa 01       	movw	r30, r20
 7f2:	e2 0f       	add	r30, r18
 7f4:	f1 1d       	adc	r31, r1
 7f6:	90 81       	ld	r25, Z
 7f8:	89 0f       	add	r24, r25
 7fa:	80 53       	subi	r24, 0x30	; 48
	PORTB ^= (1 << DAC_SEL);
}

uint8_t ascii_dec(char ascii[], uint8_t count){
	uint8_t val = 0;
	for (uint8_t i = 0; i < count; i ++){
 7fc:	2f 5f       	subi	r18, 0xFF	; 255
 7fe:	26 17       	cp	r18, r22
 800:	90 f3       	brcs	.-28     	; 0x7e6 <ascii_dec+0x8>
		val = val * 10;
		val += ascii[i] - 0x30;
	}
	return val;
}
 802:	08 95       	ret

00000804 <main>:

int main(){
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	cd b7       	in	r28, 0x3d	; 61
 80a:	de b7       	in	r29, 0x3e	; 62
 80c:	e5 97       	sbiw	r28, 0x35	; 53
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	f8 94       	cli
 812:	de bf       	out	0x3e, r29	; 62
 814:	0f be       	out	0x3f, r0	; 63
 816:	cd bf       	out	0x3d, r28	; 61
	uint32_t data_temp = 0;
	uint16_t DAC_value = 0;
	uint16_t temp = 0;
	uint8_t LED[LED_COUNT] = {0};
 818:	8e 01       	movw	r16, r28
 81a:	0f 5f       	subi	r16, 0xFF	; 255
 81c:	1f 4f       	sbci	r17, 0xFF	; 255
 81e:	82 e3       	ldi	r24, 0x32	; 50
 820:	f8 01       	movw	r30, r16
 822:	11 92       	st	Z+, r1
 824:	8a 95       	dec	r24
 826:	e9 f7       	brne	.-6      	; 0x822 <main+0x1e>
	char dir;
	char num;
	char potID;

	// DDR Setup
	DDRB = (1 << IO_EN_0) | (1 << DAC_SEL) | (1 << SS)  | (1 << MOSI) | (1 << SCK);
 828:	8f e2       	ldi	r24, 0x2F	; 47
 82a:	84 b9       	out	0x04, r24	; 4
	PORTB =  (1 << DAC_SEL);
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	85 b9       	out	0x05, r24	; 5
	
	DDRC = (1 << I2C_RST);
 830:	87 b9       	out	0x07, r24	; 7
	PORTC = 0xFF;
 832:	8f ef       	ldi	r24, 0xFF	; 255
 834:	88 b9       	out	0x08, r24	; 8
	
	DDRD  = 0xFF;
 836:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0xFF;
 838:	8b b9       	out	0x0b, r24	; 11
	
	UART_init();
 83a:	0e 94 71 00 	call	0xe2	; 0xe2 <UART_init>
	UART_SendString("\r\nConfiguring SPI interface...");
 83e:	80 e6       	ldi	r24, 0x60	; 96
 840:	91 e0       	ldi	r25, 0x01	; 1
 842:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
	SPI_Init();
 846:	0e 94 a1 00 	call	0x142	; 0x142 <SPI_Init>
	UART_SendString("DONE!");
 84a:	8f e7       	ldi	r24, 0x7F	; 127
 84c:	91 e0       	ldi	r25, 0x01	; 1
 84e:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
	
	UART_SendString("\r\nConfiguring TWI interface...");
 852:	85 e8       	ldi	r24, 0x85	; 133
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
	TWI_init_master();
 85a:	0e 94 b3 00 	call	0x166	; 0x166 <TWI_init_master>
	UART_SendString("DONE!");
 85e:	8f e7       	ldi	r24, 0x7F	; 127
 860:	91 e0       	ldi	r25, 0x01	; 1
 862:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
	
	UART_SendString("\r\nConfiguring IO Expanders...");
 866:	84 ea       	ldi	r24, 0xA4	; 164
 868:	91 e0       	ldi	r25, 0x01	; 1
 86a:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
	Init_IOX();
 86e:	0e 94 42 01 	call	0x284	; 0x284 <Init_IOX>
	UART_SendString("DONE!");
 872:	8f e7       	ldi	r24, 0x7F	; 127
 874:	91 e0       	ldi	r25, 0x01	; 1
 876:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>

	UART_SendString("\r\nTurning Off LEDs...");
 87a:	82 ec       	ldi	r24, 0xC2	; 194
 87c:	91 e0       	ldi	r25, 0x01	; 1
 87e:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
	LED_all_off(LED);
 882:	c8 01       	movw	r24, r16
 884:	0e 94 13 02 	call	0x426	; 0x426 <LED_all_off>
	UART_SendString("DONE!");
 888:	8f e7       	ldi	r24, 0x7F	; 127
 88a:	91 e0       	ldi	r25, 0x01	; 1
 88c:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
	
	UART_SendString("\n\rOPTOGENETIC DEVICE READY!\n\r");
 890:	88 ed       	ldi	r24, 0xD8	; 216
 892:	91 e0       	ldi	r25, 0x01	; 1
 894:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
	
	for(uint8_t x = 0; x < 8; x ++)
 898:	10 e0       	ldi	r17, 0x00	; 0
 89a:	1c c0       	rjmp	.+56     	; 0x8d4 <main+0xd0>
	{
		if (x == 2){			//Potentiostat U3 not working
 89c:	12 30       	cpi	r17, 0x02	; 2
 89e:	c9 f0       	breq	.+50     	; 0x8d2 <main+0xce>
			continue;
		}
		Read_LMP_Status(x, &tmp);
 8a0:	be 01       	movw	r22, r28
 8a2:	6d 5c       	subi	r22, 0xCD	; 205
 8a4:	7f 4f       	sbci	r23, 0xFF	; 255
 8a6:	81 2f       	mov	r24, r17
 8a8:	0e 94 3b 03 	call	0x676	; 0x676 <Read_LMP_Status>
		UART_SendString("\r\nUNLOCKING LM91000 ");
 8ac:	86 ef       	ldi	r24, 0xF6	; 246
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
		UART_TxChar(0x30 + x);
 8b4:	80 e3       	ldi	r24, 0x30	; 48
 8b6:	81 0f       	add	r24, r17
 8b8:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
		UART_SendString("...");
 8bc:	8f e7       	ldi	r24, 0x7F	; 127
 8be:	92 e0       	ldi	r25, 0x02	; 2
 8c0:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
		Set_LMP_Unlock(x);
 8c4:	81 2f       	mov	r24, r17
 8c6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <Set_LMP_Unlock>
		UART_SendString("DONE");
 8ca:	8b e0       	ldi	r24, 0x0B	; 11
 8cc:	92 e0       	ldi	r25, 0x02	; 2
 8ce:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
	LED_all_off(LED);
	UART_SendString("DONE!");
	
	UART_SendString("\n\rOPTOGENETIC DEVICE READY!\n\r");
	
	for(uint8_t x = 0; x < 8; x ++)
 8d2:	1f 5f       	subi	r17, 0xFF	; 255
 8d4:	18 30       	cpi	r17, 0x08	; 8
 8d6:	10 f3       	brcs	.-60     	; 0x89c <main+0x98>
		UART_TxChar(0x30 + x);
		UART_SendString("...");
		Set_LMP_Unlock(x);
		UART_SendString("DONE");
	}
	UART_SendString("\r\n\n");
 8d8:	80 e1       	ldi	r24, 0x10	; 16
 8da:	92 e0       	ldi	r25, 0x02	; 2
 8dc:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
	return val;
}

int main(){
	uint32_t data_temp = 0;
	uint16_t DAC_value = 0;
 8e0:	c1 2c       	mov	r12, r1
 8e2:	d1 2c       	mov	r13, r1
*/

	// MAIN EXECUTION LOOP
	while(1)
	{
		UART_SendString("\r\ncmd>");
 8e4:	84 e1       	ldi	r24, 0x14	; 20
 8e6:	92 e0       	ldi	r25, 0x02	; 2
 8e8:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
		//Wait until data has been received
		opcode = UART_RxChar();
 8ec:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 8f0:	18 2f       	mov	r17, r24
		UART_TxChar(opcode);
 8f2:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>

		switch(opcode){
 8f6:	10 35       	cpi	r17, 0x50	; 80
 8f8:	09 f4       	brne	.+2      	; 0x8fc <main+0xf8>
 8fa:	cf c0       	rjmp	.+414    	; 0xa9a <__stack+0x19b>
 8fc:	30 f4       	brcc	.+12     	; 0x90a <__stack+0xb>
 8fe:	11 34       	cpi	r17, 0x41	; 65
 900:	09 f4       	brne	.+2      	; 0x904 <__stack+0x5>
 902:	b3 c0       	rjmp	.+358    	; 0xa6a <__stack+0x16b>
 904:	1c 34       	cpi	r17, 0x4C	; 76
 906:	51 f0       	breq	.+20     	; 0x91c <__stack+0x1d>
 908:	53 c1       	rjmp	.+678    	; 0xbb0 <__stack+0x2b1>
 90a:	16 35       	cpi	r17, 0x56	; 86
 90c:	59 f1       	breq	.+86     	; 0x964 <__stack+0x65>
 90e:	18 35       	cpi	r17, 0x58	; 88
 910:	09 f4       	brne	.+2      	; 0x914 <__stack+0x15>
 912:	a2 c0       	rjmp	.+324    	; 0xa58 <__stack+0x159>
 914:	12 35       	cpi	r17, 0x52	; 82
 916:	09 f0       	breq	.+2      	; 0x91a <__stack+0x1b>
 918:	4b c1       	rjmp	.+662    	; 0xbb0 <__stack+0x2b1>
 91a:	55 c0       	rjmp	.+170    	; 0x9c6 <__stack+0xc7>
		//Toggle LED
		case 'L':
			UART_SendString("\n\rSELECT LED>");
 91c:	8b e1       	ldi	r24, 0x1B	; 27
 91e:	92 e0       	ldi	r25, 0x02	; 2
 920:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			id[0] = UART_RxChar();
 924:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 928:	8c ab       	std	Y+52, r24	; 0x34
			UART_TxChar(id[0]);
 92a:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			id[1] = UART_RxChar();
 92e:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 932:	8d ab       	std	Y+53, r24	; 0x35
			UART_TxChar(id[1]);
 934:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			ledID = ascii_dec(id, 2);
 938:	62 e0       	ldi	r22, 0x02	; 2
 93a:	ce 01       	movw	r24, r28
 93c:	c4 96       	adiw	r24, 0x34	; 52
 93e:	0e 94 ef 03 	call	0x7de	; 0x7de <ascii_dec>
 942:	08 2f       	mov	r16, r24
			UART_SendString("\n\rSELECT COLOUR>");
 944:	89 e2       	ldi	r24, 0x29	; 41
 946:	92 e0       	ldi	r25, 0x02	; 2
 948:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			colour = UART_RxChar();
 94c:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 950:	18 2f       	mov	r17, r24
			UART_TxChar(colour);
 952:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>

			ToggleLED(LED, ledID, colour);
 956:	41 2f       	mov	r20, r17
 958:	60 2f       	mov	r22, r16
 95a:	ce 01       	movw	r24, r28
 95c:	01 96       	adiw	r24, 0x01	; 1
 95e:	0e 94 39 02 	call	0x472	; 0x472 <ToggleLED>
			break;
 962:	c0 cf       	rjmp	.-128    	; 0x8e4 <main+0xe0>
		
		//Change DAC value
		case 'V':
			UART_SendString("\n\rSelect Direction (U/D)>");
 964:	8a e3       	ldi	r24, 0x3A	; 58
 966:	92 e0       	ldi	r25, 0x02	; 2
 968:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			dir = UART_RxChar();
 96c:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 970:	18 2f       	mov	r17, r24
			UART_TxChar(dir);
 972:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			if (dir == 'U') {
 976:	15 35       	cpi	r17, 0x55	; 85
 978:	21 f4       	brne	.+8      	; 0x982 <__stack+0x83>
				DAC_value += DAC_STEP;
 97a:	f0 e1       	ldi	r31, 0x10	; 16
 97c:	cf 0e       	add	r12, r31
 97e:	d1 1c       	adc	r13, r1
 980:	0b c0       	rjmp	.+22     	; 0x998 <__stack+0x99>
			} 
			else if (dir == 'D') {
 982:	14 34       	cpi	r17, 0x44	; 68
 984:	21 f4       	brne	.+8      	; 0x98e <__stack+0x8f>
				DAC_value -= DAC_STEP;
 986:	80 e1       	ldi	r24, 0x10	; 16
 988:	c8 1a       	sub	r12, r24
 98a:	d1 08       	sbc	r13, r1
 98c:	05 c0       	rjmp	.+10     	; 0x998 <__stack+0x99>
			}
			else {
				UART_SendString("\n\rNot a valid option!");
 98e:	84 e5       	ldi	r24, 0x54	; 84
 990:	92 e0       	ldi	r25, 0x02	; 2
 992:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
				break;
 996:	a6 cf       	rjmp	.-180    	; 0x8e4 <main+0xe0>
			}
			UART_SendString("\n\rSending DAC command...");
 998:	8a e6       	ldi	r24, 0x6A	; 106
 99a:	92 e0       	ldi	r25, 0x02	; 2
 99c:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			DAC_hi = 0b00110000 | ((DAC_value & 0x3C0) >> 6);
 9a0:	c6 01       	movw	r24, r12
 9a2:	80 7c       	andi	r24, 0xC0	; 192
 9a4:	93 70       	andi	r25, 0x03	; 3
 9a6:	00 24       	eor	r0, r0
 9a8:	88 0f       	add	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	00 1c       	adc	r0, r0
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	00 1c       	adc	r0, r0
 9b4:	89 2f       	mov	r24, r25
 9b6:	90 2d       	mov	r25, r0
			DAC_lo = (DAC_value & 0x3F) << 2;
 9b8:	6c 2d       	mov	r22, r12
 9ba:	66 0f       	add	r22, r22
 9bc:	66 0f       	add	r22, r22
			DAC_Program(DAC_hi, DAC_lo);
 9be:	80 63       	ori	r24, 0x30	; 48
 9c0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <DAC_Program>
			break;
 9c4:	8f cf       	rjmp	.-226    	; 0x8e4 <main+0xe0>
			
		//Change intensity of LEDs
		case 'R':
			UART_SendString("\n\rSELECT LED>");
 9c6:	8b e1       	ldi	r24, 0x1B	; 27
 9c8:	92 e0       	ldi	r25, 0x02	; 2
 9ca:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			id[0] = UART_RxChar();
 9ce:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 9d2:	8c ab       	std	Y+52, r24	; 0x34
			UART_TxChar(id[0]);
 9d4:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			id[1] = UART_RxChar();
 9d8:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 9dc:	8d ab       	std	Y+53, r24	; 0x35
			UART_TxChar(id[1]);
 9de:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			ledID = ascii_dec(id, 2);
 9e2:	62 e0       	ldi	r22, 0x02	; 2
 9e4:	ce 01       	movw	r24, r28
 9e6:	c4 96       	adiw	r24, 0x34	; 52
 9e8:	0e 94 ef 03 	call	0x7de	; 0x7de <ascii_dec>
 9ec:	b8 2e       	mov	r11, r24
			UART_SendString("\n\rSELECT COLOUR>");
 9ee:	89 e2       	ldi	r24, 0x29	; 41
 9f0:	92 e0       	ldi	r25, 0x02	; 2
 9f2:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			colour = UART_RxChar();
 9f6:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 9fa:	f8 2e       	mov	r15, r24
			UART_TxChar(colour);
 9fc:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			
			UART_SendString("\n\rSET RESISTANCE (NNN; 000-255)>");
 a00:	83 e8       	ldi	r24, 0x83	; 131
 a02:	92 e0       	ldi	r25, 0x02	; 2
 a04:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			num = UART_RxChar();
 a08:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 a0c:	18 2f       	mov	r17, r24
			UART_TxChar(num);
 a0e:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			lvl = (num - 0x30) * 100;
 a12:	81 2f       	mov	r24, r17
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	c0 97       	sbiw	r24, 0x30	; 48
 a18:	14 e6       	ldi	r17, 0x64	; 100
 a1a:	81 9f       	mul	r24, r17
 a1c:	00 2d       	mov	r16, r0
 a1e:	11 24       	eor	r1, r1
			num = UART_RxChar();
 a20:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 a24:	18 2f       	mov	r17, r24
			UART_TxChar(num);
 a26:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			lvl += (num - 0x30) * 10;
 a2a:	81 2f       	mov	r24, r17
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	c0 97       	sbiw	r24, 0x30	; 48
 a30:	88 0f       	add	r24, r24
 a32:	18 2f       	mov	r17, r24
 a34:	11 0f       	add	r17, r17
 a36:	11 0f       	add	r17, r17
 a38:	81 0f       	add	r24, r17
 a3a:	18 2f       	mov	r17, r24
 a3c:	10 0f       	add	r17, r16
			num = UART_RxChar();
 a3e:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 a42:	08 2f       	mov	r16, r24
			UART_TxChar(num);
 a44:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			lvl += (num - 0x30);
 a48:	10 0f       	add	r17, r16
 a4a:	40 ed       	ldi	r20, 0xD0	; 208
 a4c:	41 0f       	add	r20, r17
			
			SetLEDBrightness(ledID, colour, lvl);
 a4e:	6f 2d       	mov	r22, r15
 a50:	8b 2d       	mov	r24, r11
 a52:	0e 94 04 03 	call	0x608	; 0x608 <SetLEDBrightness>
			break;	
 a56:	46 cf       	rjmp	.-372    	; 0x8e4 <main+0xe0>
			
		//Turn off all LEDs
		case 'X':
			UART_SendString("\r\nResetting all LEDs!");
 a58:	84 ea       	ldi	r24, 0xA4	; 164
 a5a:	92 e0       	ldi	r25, 0x02	; 2
 a5c:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			LED_all_off(LED);
 a60:	ce 01       	movw	r24, r28
 a62:	01 96       	adiw	r24, 0x01	; 1
 a64:	0e 94 13 02 	call	0x426	; 0x426 <LED_all_off>
			break;
 a68:	3d cf       	rjmp	.-390    	; 0x8e4 <main+0xe0>
		
		//Turn on all LEDs of a colour
		case 'A':
			UART_SendString("\n\rSELECT COLOUR>");
 a6a:	89 e2       	ldi	r24, 0x29	; 41
 a6c:	92 e0       	ldi	r25, 0x02	; 2
 a6e:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			colour = UART_RxChar();
 a72:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 a76:	f8 2e       	mov	r15, r24
			UART_TxChar(colour);
 a78:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			
			for (int i = 0; i < LED_COUNT; i++) {
 a7c:	00 e0       	ldi	r16, 0x00	; 0
 a7e:	10 e0       	ldi	r17, 0x00	; 0
 a80:	08 c0       	rjmp	.+16     	; 0xa92 <__stack+0x193>
				ToggleLED(LED, i, colour);
 a82:	4f 2d       	mov	r20, r15
 a84:	60 2f       	mov	r22, r16
 a86:	ce 01       	movw	r24, r28
 a88:	01 96       	adiw	r24, 0x01	; 1
 a8a:	0e 94 39 02 	call	0x472	; 0x472 <ToggleLED>
		case 'A':
			UART_SendString("\n\rSELECT COLOUR>");
			colour = UART_RxChar();
			UART_TxChar(colour);
			
			for (int i = 0; i < LED_COUNT; i++) {
 a8e:	0f 5f       	subi	r16, 0xFF	; 255
 a90:	1f 4f       	sbci	r17, 0xFF	; 255
 a92:	02 33       	cpi	r16, 0x32	; 50
 a94:	11 05       	cpc	r17, r1
 a96:	ac f3       	brlt	.-22     	; 0xa82 <__stack+0x183>
 a98:	25 cf       	rjmp	.-438    	; 0x8e4 <main+0xe0>
		//Show Temperature of of potentiostat
		case 'P':
			data_temp = 0;
			temp = 0;		
			
			UART_SendString("\n\rSELECT POTENTIOSTAT (0-7) - EXCEPT 2>");
 a9a:	8a eb       	ldi	r24, 0xBA	; 186
 a9c:	92 e0       	ldi	r25, 0x02	; 2
 a9e:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			potID = UART_RxChar();
 aa2:	0e 94 80 00 	call	0x100	; 0x100 <UART_RxChar>
 aa6:	f8 2e       	mov	r15, r24
			UART_TxChar(potID);
 aa8:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			pot = potID - 0x30;
 aac:	00 ed       	ldi	r16, 0xD0	; 208
 aae:	0f 0d       	add	r16, r15
			
			if ((pot > 7) | (pot == 2)){
 ab0:	91 e0       	ldi	r25, 0x01	; 1
 ab2:	08 30       	cpi	r16, 0x08	; 8
 ab4:	08 f4       	brcc	.+2      	; 0xab8 <__stack+0x1b9>
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	81 e0       	ldi	r24, 0x01	; 1
 aba:	02 30       	cpi	r16, 0x02	; 2
 abc:	09 f0       	breq	.+2      	; 0xac0 <__stack+0x1c1>
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	89 2b       	or	r24, r25
 ac2:	29 f0       	breq	.+10     	; 0xace <__stack+0x1cf>
				UART_SendString("\n\rNOT A VALID ID OR POTENTIOSTAT OUT OF ORDER!");
 ac4:	82 ee       	ldi	r24, 0xE2	; 226
 ac6:	92 e0       	ldi	r25, 0x02	; 2
 ac8:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
				break;
 acc:	0b cf       	rjmp	.-490    	; 0x8e4 <main+0xe0>
			}
			
			Set_LMP_Temperature(pot);
 ace:	80 2f       	mov	r24, r16
 ad0:	0e 94 94 03 	call	0x728	; 0x728 <Set_LMP_Temperature>
			
			//Take an average measurement
			for(uint8_t i = 0; i < 16; i++)
 ad4:	10 e0       	ldi	r17, 0x00	; 0
			}
			break;
			
		//Show Temperature of of potentiostat
		case 'P':
			data_temp = 0;
 ad6:	81 2c       	mov	r8, r1
 ad8:	91 2c       	mov	r9, r1
 ada:	54 01       	movw	r10, r8
			}
			
			Set_LMP_Temperature(pot);
			
			//Take an average measurement
			for(uint8_t i = 0; i < 16; i++)
 adc:	09 c0       	rjmp	.+18     	; 0xaf0 <__stack+0x1f1>
			{
				temp = Read_ADC(pot,pot);
 ade:	60 2f       	mov	r22, r16
 ae0:	80 2f       	mov	r24, r16
 ae2:	0e 94 b6 03 	call	0x76c	; 0x76c <Read_ADC>
				data_temp = data_temp + temp;
 ae6:	88 0e       	add	r8, r24
 ae8:	99 1e       	adc	r9, r25
 aea:	a1 1c       	adc	r10, r1
 aec:	b1 1c       	adc	r11, r1
			}
			
			Set_LMP_Temperature(pot);
			
			//Take an average measurement
			for(uint8_t i = 0; i < 16; i++)
 aee:	1f 5f       	subi	r17, 0xFF	; 255
 af0:	10 31       	cpi	r17, 0x10	; 16
 af2:	a8 f3       	brcs	.-22     	; 0xade <__stack+0x1df>
			{
				temp = Read_ADC(pot,pot);
				data_temp = data_temp + temp;
			}
			data_temp = data_temp / 16;
 af4:	24 01       	movw	r4, r8
 af6:	35 01       	movw	r6, r10
 af8:	68 94       	set
 afa:	13 f8       	bld	r1, 3
 afc:	76 94       	lsr	r7
 afe:	67 94       	ror	r6
 b00:	57 94       	ror	r5
 b02:	47 94       	ror	r4
 b04:	16 94       	lsr	r1
 b06:	d1 f7       	brne	.-12     	; 0xafc <__stack+0x1fd>
			
			PORTD = 0xFF;
 b08:	8f ef       	ldi	r24, 0xFF	; 255
 b0a:	8b b9       	out	0x0b, r24	; 11
			UART_SendString("\n\rCH");
 b0c:	81 e1       	ldi	r24, 0x11	; 17
 b0e:	93 e0       	ldi	r25, 0x03	; 3
 b10:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			UART_TxChar(potID);
 b14:	8f 2d       	mov	r24, r15
 b16:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			UART_SendString(" : ");
 b1a:	86 e1       	ldi	r24, 0x16	; 22
 b1c:	93 e0       	ldi	r25, 0x03	; 3
 b1e:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			UART_TxChar(0x30 + (data_temp / 1000) );
 b22:	c5 01       	movw	r24, r10
 b24:	b4 01       	movw	r22, r8
 b26:	20 e8       	ldi	r18, 0x80	; 128
 b28:	3e e3       	ldi	r19, 0x3E	; 62
 b2a:	40 e0       	ldi	r20, 0x00	; 0
 b2c:	50 e0       	ldi	r21, 0x00	; 0
 b2e:	0e 94 dd 05 	call	0xbba	; 0xbba <__udivmodsi4>
 b32:	80 e3       	ldi	r24, 0x30	; 48
 b34:	82 0f       	add	r24, r18
 b36:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			UART_TxChar(0x30 + ((data_temp % 1000) / 100) );
 b3a:	c3 01       	movw	r24, r6
 b3c:	b2 01       	movw	r22, r4
 b3e:	28 ee       	ldi	r18, 0xE8	; 232
 b40:	33 e0       	ldi	r19, 0x03	; 3
 b42:	40 e0       	ldi	r20, 0x00	; 0
 b44:	50 e0       	ldi	r21, 0x00	; 0
 b46:	0e 94 dd 05 	call	0xbba	; 0xbba <__udivmodsi4>
 b4a:	0f 2e       	mov	r0, r31
 b4c:	f4 e6       	ldi	r31, 0x64	; 100
 b4e:	8f 2e       	mov	r8, r31
 b50:	91 2c       	mov	r9, r1
 b52:	a1 2c       	mov	r10, r1
 b54:	b1 2c       	mov	r11, r1
 b56:	f0 2d       	mov	r31, r0
 b58:	a5 01       	movw	r20, r10
 b5a:	94 01       	movw	r18, r8
 b5c:	0e 94 dd 05 	call	0xbba	; 0xbba <__udivmodsi4>
 b60:	80 e3       	ldi	r24, 0x30	; 48
 b62:	82 0f       	add	r24, r18
 b64:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			UART_TxChar(0x30 + ((data_temp % 100) / 10) );
 b68:	c3 01       	movw	r24, r6
 b6a:	b2 01       	movw	r22, r4
 b6c:	a5 01       	movw	r20, r10
 b6e:	94 01       	movw	r18, r8
 b70:	0e 94 dd 05 	call	0xbba	; 0xbba <__udivmodsi4>
 b74:	0f 2e       	mov	r0, r31
 b76:	fa e0       	ldi	r31, 0x0A	; 10
 b78:	8f 2e       	mov	r8, r31
 b7a:	91 2c       	mov	r9, r1
 b7c:	a1 2c       	mov	r10, r1
 b7e:	b1 2c       	mov	r11, r1
 b80:	f0 2d       	mov	r31, r0
 b82:	a5 01       	movw	r20, r10
 b84:	94 01       	movw	r18, r8
 b86:	0e 94 dd 05 	call	0xbba	; 0xbba <__udivmodsi4>
 b8a:	80 e3       	ldi	r24, 0x30	; 48
 b8c:	82 0f       	add	r24, r18
 b8e:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			UART_TxChar(0x30 + (data_temp % 10));
 b92:	c3 01       	movw	r24, r6
 b94:	b2 01       	movw	r22, r4
 b96:	a5 01       	movw	r20, r10
 b98:	94 01       	movw	r18, r8
 b9a:	0e 94 dd 05 	call	0xbba	; 0xbba <__udivmodsi4>
 b9e:	80 e3       	ldi	r24, 0x30	; 48
 ba0:	86 0f       	add	r24, r22
 ba2:	0e 94 87 00 	call	0x10e	; 0x10e <UART_TxChar>
			
			UART_SendString("\n\rTEMP READ!\r\n");
 ba6:	8a e1       	ldi	r24, 0x1A	; 26
 ba8:	93 e0       	ldi	r25, 0x03	; 3
 baa:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			break;
 bae:	9a ce       	rjmp	.-716    	; 0x8e4 <main+0xe0>
		
		default:
			UART_SendString("\r\nERR: NOT A VALID OPCODE!");
 bb0:	89 e2       	ldi	r24, 0x29	; 41
 bb2:	93 e0       	ldi	r25, 0x03	; 3
 bb4:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_SendString>
			break;
 bb8:	95 ce       	rjmp	.-726    	; 0x8e4 <main+0xe0>

00000bba <__udivmodsi4>:
 bba:	a1 e2       	ldi	r26, 0x21	; 33
 bbc:	1a 2e       	mov	r1, r26
 bbe:	aa 1b       	sub	r26, r26
 bc0:	bb 1b       	sub	r27, r27
 bc2:	fd 01       	movw	r30, r26
 bc4:	0d c0       	rjmp	.+26     	; 0xbe0 <__udivmodsi4_ep>

00000bc6 <__udivmodsi4_loop>:
 bc6:	aa 1f       	adc	r26, r26
 bc8:	bb 1f       	adc	r27, r27
 bca:	ee 1f       	adc	r30, r30
 bcc:	ff 1f       	adc	r31, r31
 bce:	a2 17       	cp	r26, r18
 bd0:	b3 07       	cpc	r27, r19
 bd2:	e4 07       	cpc	r30, r20
 bd4:	f5 07       	cpc	r31, r21
 bd6:	20 f0       	brcs	.+8      	; 0xbe0 <__udivmodsi4_ep>
 bd8:	a2 1b       	sub	r26, r18
 bda:	b3 0b       	sbc	r27, r19
 bdc:	e4 0b       	sbc	r30, r20
 bde:	f5 0b       	sbc	r31, r21

00000be0 <__udivmodsi4_ep>:
 be0:	66 1f       	adc	r22, r22
 be2:	77 1f       	adc	r23, r23
 be4:	88 1f       	adc	r24, r24
 be6:	99 1f       	adc	r25, r25
 be8:	1a 94       	dec	r1
 bea:	69 f7       	brne	.-38     	; 0xbc6 <__udivmodsi4_loop>
 bec:	60 95       	com	r22
 bee:	70 95       	com	r23
 bf0:	80 95       	com	r24
 bf2:	90 95       	com	r25
 bf4:	9b 01       	movw	r18, r22
 bf6:	ac 01       	movw	r20, r24
 bf8:	bd 01       	movw	r22, r26
 bfa:	cf 01       	movw	r24, r30
 bfc:	08 95       	ret

00000bfe <_exit>:
 bfe:	f8 94       	cli

00000c00 <__stop_program>:
 c00:	ff cf       	rjmp	.-2      	; 0xc00 <__stop_program>
